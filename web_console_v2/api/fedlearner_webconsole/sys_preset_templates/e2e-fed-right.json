{
    "comment": "",
    "config": {
        "group_alias": "e2e-test",
        "job_definitions": [
            {
                "dependencies": [],
                "easy_mode": true,
                "is_federated": false,
                "job_type": "RAW_DATA",
                "name": "raw-data-job-streaming",
                "variables": [],
                "yaml_template": "{\n  \"apiVersion\": \"fedlearner.k8s.io/v1alpha1\",\n  \"kind\": \"FLApp\",\n  \"metadata\": {\n    \"name\": self.name,\n    \"namespace\": system.variables.namespace,\n    \"annotations\":{\n        \"queue\": \"fedlearner\",\n        \"schedulerName\": \"batch\"\n    },\n    \"labels\": dict(system.variables.labels)\n  },\n  \"spec\": {\n    \"role\": \"Follower\",\n    \"peerSpecs\": {\n      \"Leader\": {\n        \"peerURL\": \"\",\n        \"authority\": \"\"\n      }\n    },\n    \"flReplicaSpecs\": {\n      \"Master\": {\n        \"template\": {\n          \"spec\": {\n            \"restartPolicy\": \"Never\",\n            \"containers\": [\n              {\n                \"env\": system.basic_envs_list + [\n                  {\n                    \"name\": \"STORAGE_ROOT_PATH\",\n                    \"value\": str(project.variables.storage_root_path)\n                  },\n                    {\n                    \"name\": \"EGRESS_URL\",\n                    \"value\": \"fedlearner-stack-ingress-nginx-controller.default.svc:80\"\n                  },\n                  {\n                    \"name\": \"EGRESS_HOST\",\n                    \"value\": project.participants[0].egress_host\n                  },\n                  {\n                    \"name\": \"EGRESS_DOMAIN\",\n                    \"value\": project.participants[0].egress_domain\n                  },\n                  {\n                    \"name\": \"APPLICATION_ID\",\n                    \"value\": self.name\n                  },\n                  {\n                    \"name\": \"DATA_PORTAL_NAME\",\n                    \"value\": self.name\n                  },\n                    {\n                    \"name\": \"DATA_PORTAL_TYPE\",\n                    \"value\": \"Streaming\"\n                  },\n                  {\n                    \"name\": \"OUTPUT_PARTITION_NUM\",\n                    \"value\": str(int(workflow.variables.num_partitions))\n                  },\n                  {\n                    \"name\": \"INPUT_BASE_DIR\",\n                    \"value\": str(workflow.variables.input_base_dir)\n                  },\n                  {\n                    \"name\": \"OUTPUT_BASE_DIR\",\n                    \"value\": str(project.variables.storage_root_path) + \"/raw_data/\" + self.name\n                  },\n                  {\n                    \"name\": \"RAW_DATA_PUBLISH_DIR\",\n                    \"value\": \"portal_publish_dir/\" + self.name\n                  },\n                  {\n                    \"name\": \"FILE_WILDCARD\",\n                    \"value\": str(workflow.variables.file_wildcard)\n                  },\n                  {\n                    \"name\": \"LONG_RUNNING\",\n                    \"value\": \"\"\n                  },\n                  {\n                    \"name\": \"CHECK_SUCCESS_TAG\",\n                    \"value\": \"\"\n                  },\n                  {\n                    \"name\": \"FILES_PER_JOB_LIMIT\",\n                    \"value\": str(None)\n                  },\n                  {\n                    \"name\": \"SINGLE_SUBFOLDER\",\n                    \"value\": \"\"\n                  }\n\n                ] + [],\n                \"imagePullPolicy\": \"IfNotPresent\",\n                \"name\": \"tensorflow\",\n                \"volumeMounts\": list(system.variables.volume_mounts_list),\n                \"image\": str(workflow.variables.image),\n                \"ports\": [\n                  {\n                    \"containerPort\": 50051,\n                    \"name\": \"flapp-port\",\n                    \"protocol\": \"TCP\"\n                  }\n                ],\n                \"command\": [\n                  \"/app/deploy/scripts/data_portal/run_data_portal_master.sh\"\n                ],\n                \"args\": [\n                ],\n                \"resources\": {\n                  \"limits\": {\n                    \"cpu\": \"2000m\",\n                    \"memory\": \"3Gi\"\n                  },\n                  \"requests\": {\n                    \"cpu\": \"2000m\",\n                    \"memory\": \"3Gi\"\n                  }\n                }\n              }\n            ],\n            \"imagePullSecrets\": [\n              {\n                \"name\": \"regcred\"\n              }\n            ],\n            \"volumes\": list(system.variables.volumes_list)\n          }\n        },\n        \"pair\": False,\n        \"replicas\": 1\n      },\n      \"Worker\": {\n        \"template\": {\n          \"spec\": {\n            \"restartPolicy\": \"Never\",\n            \"containers\": [\n              {\n                \"env\": system.basic_envs_list + [\n                  {\n                    \"name\": \"STORAGE_ROOT_PATH\",\n                    \"value\": str(project.variables.storage_root_path)\n                  },\n                  {\n                    \"name\": \"APPLICATION_ID\",\n                    \"value\": self.name\n                  },\n                  {\n                    \"name\": \"OUTPUT_BASE_DIR\",\n                    \"value\": str(project.variables.storage_root_path) + \"/data_source/\" + self.name\n                  },\n                  {\n                    \"name\": \"EGRESS_URL\",\n                    \"value\": \"fedlearner-stack-ingress-nginx-controller.default.svc:80\"\n                  },\n                  {\n                    \"name\": \"EGRESS_HOST\",\n                    \"value\": project.participants[0].egress_host\n                  },\n                  {\n                    \"name\": \"EGRESS_DOMAIN\",\n                    \"value\": project.participants[0].egress_domain\n                  },\n\n                  {\n                    \"name\": \"BATCH_SIZE\",\n                    \"value\": str(1024)\n                  },\n                  {\n                    \"name\": \"INPUT_DATA_FORMAT\",\n                    \"value\": str(workflow.variables.input_data_format)\n                  },\n                  {\n                    \"name\": \"COMPRESSED_TYPE\",\n                    \"value\": \"\"\n                  },\n                  {\n                    \"name\": \"OUTPUT_DATA_FORMAT\",\n                    \"value\": \"TF_RECORD\"\n                  },\n                  {\n                    \"name\": \"BUILDER_COMPRESSED_TYPE\",\n                    \"value\": \"\"\n                  },\n                  {\n                    \"name\": \"MEMORY_LIMIT_RATIO\",\n                    \"value\": str(70)\n                  },\n                  {\n                    \"name\": \"OPTIONAL_FIELDS\",\n                    \"value\": \"\"\n                  }\n\n\n                ] + [],\n                \"imagePullPolicy\": \"IfNotPresent\",\n                \"name\": \"tensorflow\",\n                \"volumeMounts\": list(system.variables.volume_mounts_list),\n                \"image\": str(workflow.variables.image),\n                \"ports\": [\n                  {\n                    \"containerPort\": 50051,\n                    \"name\": \"flapp-port\",\n                    \"protocol\": \"TCP\"\n                  }\n                ],\n                \"command\": [\n                  \"/app/deploy/scripts/data_portal/run_data_portal_worker.sh\"\n                ],\n                \"args\": [\n                ],\n                \"resources\": {\n                  \"limits\": {\n                    \"cpu\": \"2000m\",\n                    \"memory\": \"3Gi\"\n                  },\n                  \"requests\": {\n                    \"cpu\": \"2000m\",\n                    \"memory\": \"3Gi\"\n                  }\n                }\n              }\n            ],\n            \"imagePullSecrets\": [\n              {\n                \"name\": \"regcred\"\n              }\n            ],\n            \"volumes\": list(system.variables.volumes_list)\n          }\n        },\n        \"pair\": False,\n        \"replicas\": int(workflow.variables.num_partitions)\n      }\n    }\n  }\n}\n"
            },
            {
                "dependencies": [],
                "easy_mode": true,
                "is_federated": false,
                "job_type": "RAW_DATA",
                "name": "raw-data-job-psi",
                "variables": [],
                "yaml_template": "{\n  \"apiVersion\": \"fedlearner.k8s.io/v1alpha1\",\n  \"kind\": \"FLApp\",\n  \"metadata\": {\n    \"name\": self.name,\n    \"namespace\": system.variables.namespace,\n    \"annotations\":{\n        \"queue\": \"fedlearner\",\n        \"schedulerName\": \"batch\"\n    },\n    \"labels\": dict(system.variables.labels)\n  },\n  \"spec\": {\n    \"role\": \"Follower\",\n    \"peerSpecs\": {\n      \"Leader\": {\n        \"peerURL\": \"\",\n        \"authority\": \"\"\n      }\n    },\n    \"flReplicaSpecs\": {\n      \"Master\": {\n        \"template\": {\n          \"spec\": {\n            \"restartPolicy\": \"Never\",\n            \"containers\": [\n              {\n                \"env\": system.basic_envs_list + [\n                  {\n                    \"name\": \"STORAGE_ROOT_PATH\",\n                    \"value\": str(project.variables.storage_root_path)\n                  },\n                    {\n                    \"name\": \"EGRESS_URL\",\n                    \"value\": \"fedlearner-stack-ingress-nginx-controller.default.svc:80\"\n                  },\n                  {\n                    \"name\": \"EGRESS_HOST\",\n                    \"value\": project.participants[0].egress_host\n                  },\n                  {\n                    \"name\": \"EGRESS_DOMAIN\",\n                    \"value\": project.participants[0].egress_domain\n                  },\n                  {\n                    \"name\": \"APPLICATION_ID\",\n                    \"value\": self.name\n                  },\n                  {\n                    \"name\": \"DATA_PORTAL_NAME\",\n                    \"value\": self.name\n                  },\n                    {\n                    \"name\": \"DATA_PORTAL_TYPE\",\n                    \"value\": \"PSI\"\n                  },\n                  {\n                    \"name\": \"OUTPUT_PARTITION_NUM\",\n                    \"value\": str(int(workflow.variables.num_partitions))\n                  },\n                  {\n                    \"name\": \"INPUT_BASE_DIR\",\n                    \"value\": str(workflow.variables.input_base_dir)\n                  },\n                  {\n                    \"name\": \"OUTPUT_BASE_DIR\",\n                    \"value\": str(project.variables.storage_root_path) + \"/raw_data/\" + self.name\n                  },\n                  {\n                    \"name\": \"RAW_DATA_PUBLISH_DIR\",\n                    \"value\": \"portal_publish_dir/\" + self.name\n                  },\n                  {\n                    \"name\": \"FILE_WILDCARD\",\n                    \"value\": str(workflow.variables.file_wildcard)\n                  },\n                  {\n                    \"name\": \"LONG_RUNNING\",\n                    \"value\": \"\"\n                  },\n                  {\n                    \"name\": \"CHECK_SUCCESS_TAG\",\n                    \"value\": \"\"\n                  },\n                  {\n                    \"name\": \"FILES_PER_JOB_LIMIT\",\n                    \"value\": str(None)\n                  },\n                  {\n                    \"name\": \"SINGLE_SUBFOLDER\",\n                    \"value\": \"\"\n                  }\n\n                ] + [],\n                \"imagePullPolicy\": \"IfNotPresent\",\n                \"name\": \"tensorflow\",\n                \"volumeMounts\": list(system.variables.volume_mounts_list),\n                \"image\": str(workflow.variables.image),\n                \"ports\": [\n                  {\n                    \"containerPort\": 50051,\n                    \"name\": \"flapp-port\",\n                    \"protocol\": \"TCP\"\n                  }\n                ],\n                \"command\": [\n                  \"/app/deploy/scripts/data_portal/run_data_portal_master.sh\"\n                ],\n                \"args\": [\n                ],\n                \"resources\": {\n                  \"limits\": {\n                    \"cpu\": \"2000m\",\n                    \"memory\": \"3Gi\"\n                  },\n                  \"requests\": {\n                    \"cpu\": \"2000m\",\n                    \"memory\": \"3Gi\"\n                  }\n                }\n              }\n            ],\n            \"imagePullSecrets\": [\n              {\n                \"name\": \"regcred\"\n              }\n            ],\n            \"volumes\": list(system.variables.volumes_list)\n          }\n        },\n        \"pair\": False,\n        \"replicas\": 1\n      },\n      \"Worker\": {\n        \"template\": {\n          \"spec\": {\n            \"restartPolicy\": \"Never\",\n            \"containers\": [\n              {\n                \"env\": system.basic_envs_list + [\n                  {\n                    \"name\": \"STORAGE_ROOT_PATH\",\n                    \"value\": str(project.variables.storage_root_path)\n                  },\n                  {\n                    \"name\": \"APPLICATION_ID\",\n                    \"value\": self.name\n                  },\n                  {\n                    \"name\": \"OUTPUT_BASE_DIR\",\n                    \"value\": str(project.variables.storage_root_path) + \"/data_source/\" + self.name\n                  },\n                  {\n                    \"name\": \"EGRESS_URL\",\n                    \"value\": \"fedlearner-stack-ingress-nginx-controller.default.svc:80\"\n                  },\n                  {\n                    \"name\": \"EGRESS_HOST\",\n                    \"value\": project.participants[0].egress_host\n                  },\n                  {\n                    \"name\": \"EGRESS_DOMAIN\",\n                    \"value\": project.participants[0].egress_domain\n                  },\n\n                  {\n                    \"name\": \"BATCH_SIZE\",\n                    \"value\": str(1024)\n                  },\n                  {\n                    \"name\": \"INPUT_DATA_FORMAT\",\n                    \"value\": str(workflow.variables.input_data_format)\n                  },\n                  {\n                    \"name\": \"COMPRESSED_TYPE\",\n                    \"value\": \"\"\n                  },\n                  {\n                    \"name\": \"OUTPUT_DATA_FORMAT\",\n                    \"value\": \"TF_RECORD\"\n                  },\n                  {\n                    \"name\": \"BUILDER_COMPRESSED_TYPE\",\n                    \"value\": \"\"\n                  },\n                  {\n                    \"name\": \"MEMORY_LIMIT_RATIO\",\n                    \"value\": str(70)\n                  },\n                  {\n                    \"name\": \"OPTIONAL_FIELDS\",\n                    \"value\": \"\"\n                  }\n\n\n                ] + [],\n                \"imagePullPolicy\": \"IfNotPresent\",\n                \"name\": \"tensorflow\",\n                \"volumeMounts\": list(system.variables.volume_mounts_list),\n                \"image\": str(workflow.variables.image),\n                \"ports\": [\n                  {\n                    \"containerPort\": 50051,\n                    \"name\": \"flapp-port\",\n                    \"protocol\": \"TCP\"\n                  }\n                ],\n                \"command\": [\n                  \"/app/deploy/scripts/data_portal/run_data_portal_worker.sh\"\n                ],\n                \"args\": [\n                ],\n                \"resources\": {\n                  \"limits\": {\n                    \"cpu\": \"2000m\",\n                    \"memory\": \"3Gi\"\n                  },\n                  \"requests\": {\n                    \"cpu\": \"2000m\",\n                    \"memory\": \"3Gi\"\n                  }\n                }\n              }\n            ],\n            \"imagePullSecrets\": [\n              {\n                \"name\": \"regcred\"\n              }\n            ],\n            \"volumes\": list(system.variables.volumes_list)\n          }\n        },\n        \"pair\": False,\n        \"replicas\": int(workflow.variables.num_partitions)\n      }\n    }\n  }\n}\n"
            },
            {
                "dependencies": [
                    {
                        "source": "raw-data-job-streaming"
                    },
                    {
                        "source": "raw-data-job-psi"
                    }
                ],
                "easy_mode": true,
                "is_federated": true,
                "job_type": "DATA_JOIN",
                "name": "data-join-job",
                "variables": [],
                "yaml_template": "{\n  \"apiVersion\": \"fedlearner.k8s.io/v1alpha1\",\n  \"kind\": \"FLApp\",\n  \"metadata\": {\n    \"name\": self.name,\n    \"namespace\": system.variables.namespace,\n    \"annotations\":{\n        \"queue\": \"fedlearner\",\n        \"schedulerName\": \"batch\"\n    },\n    \"labels\": dict(system.variables.labels)\n  },\n  \"spec\": {\n    \"role\": str(workflow.variables.role),\n    \"cleanPodPolicy\": \"All\",\n    \"peerSpecs\": {\n      \"Leader\" if str(workflow.variables.role)==\"Follower\" else \"Follower\": {\n        \"peerURL\": \"fedlearner-stack-ingress-nginx-controller.default.svc:80\",\n        \"authority\": project.participants[0].egress_host,\n        \"extraHeaders\": {\n          \"x-host\": \"fedlearner-operator.\" + project.participants[0].egress_domain\n        }\n      }\n    },\n    \"flReplicaSpecs\": {\n      \"Master\": {\n        \"template\": {\n          \"spec\": {\n            \"restartPolicy\": \"Never\",\n            \"containers\": [\n              {\n                \"env\": system.basic_envs_list + [\n                  {\n                    \"name\": \"STORAGE_ROOT_PATH\",\n                    \"value\": str(project.variables.storage_root_path)\n                  },\n                  {\n                    \"name\": \"ROLE\",\n                    \"value\": str(workflow.variables.role).lower()\n                  },\n                  {\n                    \"name\": \"APPLICATION_ID\",\n                    \"value\": self.name\n                  },\n                  {\n                    \"name\": \"OUTPUT_BASE_DIR\",\n                    \"value\": str(project.variables.storage_root_path) + \"/data_source/\" + self.name\n                  },\n                  {\n                    \"name\": \"EGRESS_URL\",\n                    \"value\": \"fedlearner-stack-ingress-nginx-controller.default.svc:80\"\n                  },\n                  {\n                    \"name\": \"EGRESS_HOST\",\n                    \"value\": project.participants[0].egress_host\n                  },\n                  {\n                    \"name\": \"EGRESS_DOMAIN\",\n                    \"value\": project.participants[0].egress_domain\n                  },\n                  {\n                    \"name\": \"BATCH_MODE\",\n                    \"value\": \"--batch_mode\"\n                  },\n                  {\n                    \"name\": \"PARTITION_NUM\",\n                    \"value\": str(int(workflow.variables.num_partitions))\n                  },\n                  {\n                    \"name\": \"START_TIME\",\n                    \"value\": str(0)\n                  },\n                  {\n                    \"name\": \"END_TIME\",\n                    \"value\": str(999999999999)\n                  },\n                  {\n                    \"name\": \"RAW_DATA_SUB_DIR\",\n                    \"value\": \"portal_publish_dir/\" + str(workflow.jobs['raw-data-job-streaming'].name)\n                  },\n                  {\n                    # not work, remove it after prepare_launch_data_join_cli been removed\n                    \"name\": \"NEGATIVE_SAMPLING_RATE\",\n                    \"value\": str(0.0)\n                  }\n                ]  + [],\n                \"imagePullPolicy\": \"IfNotPresent\",\n                \"name\": \"tensorflow\",\n                \"volumeMounts\":\n                  list(system.variables.volume_mounts_list)\n                ,\n                \"image\": str(workflow.variables.image),\n                \"ports\": [\n                  {\n                    \"containerPort\": 50051,\n                    \"name\": \"flapp-port\",\n                    \"protocol\": \"TCP\"\n                  }\n                ],\n                \"command\": [\n                  \"/app/deploy/scripts/wait4pair_wrapper.sh\"\n                ],\n                \"args\": [\n                  \"/app/deploy/scripts/data_join/run_data_join_master.sh\"\n                ],\n                \"resources\": {\n                  \"limits\": {\n                    \"cpu\": \"2000m\",\n                    \"memory\": \"3Gi\"\n                  },\n                  \"requests\": {\n                    \"cpu\": \"2000m\",\n                    \"memory\": \"3Gi\"\n                  }\n                }\n              }\n            ],\n            \"imagePullSecrets\": [\n              {\n                \"name\": \"regcred\"\n              }\n            ],\n            \"volumes\":\n        list(system.variables.volumes_list)\n\n          }\n        },\n        \"pair\": true,\n        \"replicas\": 1\n      },\n      \"Worker\": {\n        \"template\": {\n          \"spec\": {\n            \"restartPolicy\": \"Never\",\n            \"containers\": [\n              {\n                \"env\": system.basic_envs_list + [\n                  {\n                    \"name\": \"STORAGE_ROOT_PATH\",\n                    \"value\": str(project.variables.storage_root_path)\n                  },\n                  {\n                    \"name\": \"ROLE\",\n                    \"value\": str(workflow.variables.role).lower()\n                  },\n                  {\n                    \"name\": \"APPLICATION_ID\",\n                    \"value\": self.name\n                  },\n                  {\n                    \"name\": \"OUTPUT_BASE_DIR\",\n                    \"value\": str(project.variables.storage_root_path) + \"/data_source/\" + self.name\n                  },\n                  {\n                    \"name\": \"EGRESS_URL\",\n                    \"value\": \"fedlearner-stack-ingress-nginx-controller.default.svc:80\"\n                  },\n                  {\n                    \"name\": \"EGRESS_HOST\",\n                    \"value\": project.participants[0].egress_host\n                  },\n                  {\n                    \"name\": \"EGRESS_DOMAIN\",\n                    \"value\": project.participants[0].egress_domain\n                  },\n                  {\n                    \"name\": \"PARTITION_NUM\",\n                    \"value\": str(int(workflow.variables.num_partitions))\n                  },\n                  {\n                    \"name\": \"RAW_DATA_SUB_DIR\",\n                    \"value\": \"portal_publish_dir/\" + str(workflow.jobs['raw-data-job-streaming'].name)\n                  },\n                  {\n                    \"name\": \"DATA_BLOCK_DUMP_INTERVAL\",\n                    \"value\": str(-1)\n                  },\n                  {\n                    \"name\": \"DATA_BLOCK_DUMP_THRESHOLD\",\n                    \"value\": str(4096)\n                  },\n                  {\n                    \"name\": \"EXAMPLE_ID_DUMP_INTERVAL\",\n                    \"value\": str(-1)\n                  },\n                  {\n                    \"name\": \"EXAMPLE_ID_DUMP_THRESHOLD\",\n                    \"value\": str(4096)\n                  },\n                  {\n                    \"name\": \"MIN_MATCHING_WINDOW\",\n                    \"value\": str(1024)\n                  },\n                  {\n                    \"name\": \"MAX_MATCHING_WINDOW\",\n                    \"value\": str(4096)\n                  },\n                  {\n                    \"name\": \"RAW_DATA_ITER\",\n                    \"value\": \"TF_RECORD\"\n                  },\n                  {\n                    \"name\": \"ENABLE_NEGATIVE_EXAMPLE_GENERATOR\",\n                    \"value\": str(False)\n                  },\n                  {\n                    \"name\": \"NEGATIVE_SAMPLING_RATE\",\n                    \"value\": str(0.0)\n                  },\n                ] + [],\n                \"imagePullPolicy\": \"IfNotPresent\",\n                \"name\": \"tensorflow\",\n                \"volumeMounts\":\n                  list(system.variables.volume_mounts_list)\n                ,\n                \"image\": str(workflow.variables.image),\n                \"ports\": [\n                  {\n                    \"containerPort\": 50051,\n                    \"name\": \"flapp-port\",\n                    \"protocol\": \"TCP\"\n                  }\n                ],\n                \"command\": [\n                  \"/app/deploy/scripts/wait4pair_wrapper.sh\"\n                ],\n                \"args\": [\n                  \"/app/deploy/scripts/data_join/run_data_join_worker.sh\"\n                ],\n                \"resources\": {\n                  \"limits\": {\n                    \"cpu\": \"2000m\",\n                    \"memory\": \"3Gi\"\n                  },\n                  \"requests\": {\n                    \"cpu\": \"2000m\",\n                    \"memory\": \"3Gi\"\n                  }\n                }\n              }\n            ],\n            \"imagePullSecrets\": [\n              {\n                \"name\": \"regcred\"\n              }\n            ],\n            \"volumes\":\n        list(system.variables.volumes_list)\n\n          }\n        },\n        \"pair\": true,\n        \"replicas\": int(workflow.variables.num_partitions)\n      }\n    }\n  }\n}\n"
            },
            {
                "dependencies": [
                    {
                        "source": "raw-data-job-streaming"
                    },
                    {
                        "source": "raw-data-job-psi"
                    }
                ],
                "easy_mode": true,
                "is_federated": true,
                "job_type": "PSI_DATA_JOIN",
                "name": "psi-data-join-job",
                "variables": [
                    {
                        "access_mode": "PEER_WRITABLE",
                        "name": "rsa_key_pem",
                        "tag": "",
                        "typed_value": "",
                        "value": "",
                        "value_type": "STRING",
                        "widget_schema": "{\"component\":\"TextArea\",\"required\":false}"
                    },
                    {
                        "access_mode": "PEER_WRITABLE",
                        "name": "rsa_private_key_path",
                        "tag": "",
                        "typed_value": "/app/deploy/integrated_test/rsa_private.key",
                        "value": "/app/deploy/integrated_test/rsa_private.key",
                        "value_type": "STRING",
                        "widget_schema": "{\"component\":\"Input\",\"required\":false}"
                    },
                    {
                        "access_mode": "PEER_WRITABLE",
                        "name": "rsa_key_path",
                        "tag": "",
                        "typed_value": "/app/deploy/integrated_test/rsa_private.key",
                        "value": "/app/deploy/integrated_test/rsa_private.key",
                        "value_type": "STRING",
                        "widget_schema": "{\"component\":\"Input\",\"required\":false}"
                    }
                ],
                "yaml_template": "{\n    \"apiVersion\": \"fedlearner.k8s.io/v1alpha1\",\n    \"kind\": \"FLApp\",\n    \"metadata\": {\n    \"name\": self.name,\n    \"namespace\": system.variables.namespace,\n      \"annotations\":{\n          \"queue\": \"fedlearner\",\n          \"schedulerName\": \"batch\"\n      },\n    \"labels\": dict(system.variables.labels)\n    },\n    \"spec\": {\n        \"role\": str(workflow.variables.role),\n        \"cleanPodPolicy\": \"All\",\n        \"peerSpecs\": {\n        \"Leader\" if str(workflow.variables.role)==\"Follower\" else \"Follower\": {\n            \"peerURL\": \"fedlearner-stack-ingress-nginx-controller.default.svc:80\",\n            \"authority\": project.participants[0].egress_host,\n            \"extraHeaders\": {\n            \"x-host\": \"fedlearner-operator.\" + project.participants[0].egress_domain\n            }\n        }\n        },\n        \"flReplicaSpecs\": {\n            \"Master\": {\n                \"template\": {\n                    \"spec\": {\n                        \"restartPolicy\": \"Never\",\n                        \"containers\": [\n                            {\n                                \"env\": system.basic_envs_list + [\n                                    {\n                                        \"name\": \"STORAGE_ROOT_PATH\",\n                                        \"value\": str(project.variables.storage_root_path)\n                                    },\n                                    {\n                                        \"name\": \"ROLE\",\n                                        \"value\": str(workflow.variables.role).lower()\n                                    },\n                                    {\n                                        \"name\": \"APPLICATION_ID\",\n                                        \"value\": self.name\n                                    },\n                                    {\n                                        \"name\": \"OUTPUT_BASE_DIR\",\n                                        \"value\": str(project.variables.storage_root_path) + \"/data_source/\" + self.name\n                                    },\n                                    {\n                                        \"name\": \"EGRESS_URL\",\n                                        \"value\": \"fedlearner-stack-ingress-nginx-controller.default.svc:80\"\n                                    },\n                                    {\n                                        \"name\": \"EGRESS_HOST\",\n                                        \"value\": project.participants[0].egress_host\n                                    },\n                                    {\n                                        \"name\": \"EGRESS_DOMAIN\",\n                                        \"value\": project.participants[0].egress_domain\n                                    },\n                                    {\n                                        \"name\": \"PARTITION_NUM\",\n                                        \"value\": str(int(workflow.variables.num_partitions))\n                                    },\n                                    {\n                                        \"name\": \"START_TIME\",\n                                        \"value\": str(0)\n                                    },\n                                    {\n                                        \"name\": \"END_TIME\",\n                                        \"value\": str(999999999999)\n                                    },\n                                    {\n                                        \"name\": \"RAW_DATA_SUB_DIR\",\n                                        \"value\": \"portal_publish_dir/\" + str(workflow.jobs['raw-data-job-psi'].name)\n                                    },\n                                    {\n                                        # not work, remove it after prepare_launch_data_join_cli been removed\n                                        \"name\": \"NEGATIVE_SAMPLING_RATE\",\n                                        \"value\": str(0.0)\n                                    }\n                                ] + [],\n                                \"imagePullPolicy\": \"IfNotPresent\",\n                                \"name\": \"tensorflow\",\n                                \"volumeMounts\": list(system.variables.volume_mounts_list),\n                                \"image\": str(workflow.variables.image),\n                                \"ports\": [\n                                    {\n                                        \"containerPort\": 50051,\n                                        \"name\": \"flapp-port\",\n                                        \"protocol\": \"TCP\"\n                                    }\n                                ],\n                                \"command\": [\n                                    \"/app/deploy/scripts/wait4pair_wrapper.sh\"\n                                ],\n                                \"args\": [\n                                    \"/app/deploy/scripts/rsa_psi/run_psi_data_join_master.sh\"\n                                ],\n                                \"resources\": {\n                                      \"limits\": {\n                                        \"cpu\": \"2000m\",\n                                        \"memory\": \"3Gi\"\n                                      },\n                                      \"requests\": {\n                                        \"cpu\": \"2000m\",\n                                        \"memory\": \"3Gi\"\n                                      }\n                                }\n                            }\n                        ],\n                        \"imagePullSecrets\": [\n                            {\n                                \"name\": \"regcred\"\n                            }\n                        ],\n                        \"volumes\": list(system.variables.volumes_list)\n                    }\n                },\n                \"pair\": True,\n                \"replicas\": 1\n            },\n            \"Worker\": {\n                \"template\": {\n                    \"spec\": {\n                        \"restartPolicy\": \"Never\",\n                        \"containers\": [\n                            {\n                                \"env\": system.basic_envs_list + [\n                                    {\n                                        \"name\": \"STORAGE_ROOT_PATH\",\n                                        \"value\": str(project.variables.storage_root_path)\n                                    },\n                                    {\n                                        \"name\": \"EGRESS_URL\",\n                                        \"value\": \"fedlearner-stack-ingress-nginx-controller.default.svc:80\"\n                                    },\n                                    {\n                                        \"name\": \"EGRESS_HOST\",\n                                        \"value\": project.participants[0].egress_host\n                                    },\n                                    {\n                                        \"name\": \"EGRESS_DOMAIN\",\n                                        \"value\": project.participants[0].egress_domain\n                                    },\n                                    {\n                                        \"name\": \"ROLE\",\n                                        \"value\": str(workflow.variables.role).lower()\n                                    },\n                                    {\n                                        \"name\": \"APPLICATION_ID\",\n                                        \"value\": self.name\n                                    },\n                                    {\n                                        \"name\": \"BATCH_MODE\",\n                                        \"value\": \"--batch_mode\"\n                                    },\n                                    {\n                                        \"name\": \"OUTPUT_BASE_DIR\",\n                                        \"value\": str(project.variables.storage_root_path) + \"/data_source/\" + self.name\n                                    },\n                                    {\n                                        \"name\": \"PARTITION_NUM\",\n                                        \"value\": str(int(workflow.variables.num_partitions))\n                                    },\n                                    {\n                                        \"name\": \"RAW_DATA_SUB_DIR\",\n                                        \"value\": \"portal_publish_dir/\" + str(workflow.jobs['raw-data-job-psi'].name)\n                                    },\n                                    {\n                                        \"name\": \"RSA_KEY_PEM\",\n                                        \"value\": str(self.variables.rsa_key_pem)\n                                    },\n                                    {\n                                        \"name\": \"RSA_KEY_PATH\",\n                                        \"value\": str(self.variables.rsa_key_path)\n                                    },\n                                    {\n                                        \"name\": \"RSA_PRIVATE_KEY_PATH\",\n                                        \"value\": str(self.variables.rsa_private_key_path)\n                                    },\n                                    {\n                                        \"name\": \"KMS_KEY_NAME\",\n                                        \"value\": \"\"\n                                    },\n                                    {\n                                        \"name\": \"KMS_CLIENT\",\n                                        \"value\": \"data.aml.fl\"\n                                    },\n                                    {\n                                        \"name\": \"PSI_RAW_DATA_ITER\",\n                                        \"value\": \"TF_RECORD\"\n                                    },\n                                    {\n                                        \"name\": \"DATA_BLOCK_BUILDER\",\n                                        \"value\": \"TF_RECORD\"\n                                    },\n                                    {\n                                        \"name\": \"PSI_OUTPUT_BUILDER\",\n                                        \"value\": \"TF_RECORD\"\n                                    },\n                                    {\n                                        \"name\": \"DATA_BLOCK_DUMP_INTERVAL\",\n                                        \"value\": str(-1)\n                                    },\n                                    {\n                                        \"name\": \"DATA_BLOCK_DUMP_THRESHOLD\",\n                                        \"value\": str(4096)\n                                    },\n                                    {\n                                        \"name\": \"EXAMPLE_ID_DUMP_INTERVAL\",\n                                        \"value\": str(-1)\n                                    },\n                                    {\n                                        \"name\": \"EXAMPLE_ID_DUMP_THRESHOLD\",\n                                        \"value\": str(4096)\n                                    },\n                                    {\n                                        \"name\": \"EXAMPLE_JOINER\",\n                                        \"value\": \"SORT_RUN_JOINER\"\n                                    },\n                                    {\n                                        \"name\": \"PSI_READ_AHEAD_SIZE\",\n                                        \"value\": str(None)\n                                    },\n                                    {\n                                        \"name\": \"SORT_RUN_MERGER_READ_AHEAD_BUFFER\",\n                                        \"value\": str(None)\n                                    },\n                                    {\n                                        \"name\": \"NEGATIVE_SAMPLING_RATE\",\n                                        \"value\": str(0.0)\n                                    },\n                                    {\n                                        \"name\": \"ENABLE_NEGATIVE_EXAMPLE_GENERATOR\",\n                                        \"value\": str(False)\n                                    }\n                                ] + [],\n                                \"imagePullPolicy\": \"IfNotPresent\",\n                                \"name\": \"tensorflow\",\n                                \"volumeMounts\": list(system.variables.volume_mounts_list),\n                                \"image\": str(workflow.variables.image),\n                                \"ports\": [\n                                    {\n                                        \"containerPort\": 50051,\n                                        \"name\": \"flapp-port\",\n                                        \"protocol\": \"TCP\"\n                                    }\n                                ],\n                                \"command\": [\n                                    \"/app/deploy/scripts/wait4pair_wrapper.sh\"\n                                ],\n                                \"args\": [\n                                    \"/app/deploy/scripts/rsa_psi/run_psi_data_join_worker.sh\"\n                                ],\n                                \"resources\": {\n                                    \"limits\": {\n                                        \"cpu\": \"2000m\",\n                                        \"memory\": \"3Gi\"\n                                    },\n                                    \"requests\": {\n                                        \"cpu\": \"2000m\",\n                                        \"memory\": \"3Gi\"\n                                    }\n                                }\n                            }\n                        ],\n                        \"imagePullSecrets\": [\n                            {\n                                \"name\": \"regcred\"\n                            }\n                        ],\n                        \"volumes\": list(system.variables.volumes_list)\n                    }\n                },\n                \"pair\": True,\n                \"replicas\": int(int(workflow.variables.num_partitions))\n            }\n        }\n    }\n}\n"
            },
            {
                "dependencies": [
                    {
                        "source": "data-join-job"
                    }
                ],
                "easy_mode": false,
                "is_federated": true,
                "job_type": "NN_MODEL_TRANINING",
                "name": "nn-train",
                "variables": [
                    {
                        "access_mode": "PEER_WRITABLE",
                        "name": "epoch_num",
                        "tag": "",
                        "typed_value": "10",
                        "value": "10",
                        "value_type": "STRING",
                        "widget_schema": "{\"component\":\"Input\",\"required\":true}"
                    },
                    {
                        "access_mode": "PEER_WRITABLE",
                        "name": "code_tar",
                        "tag": "",
                        "typed_value": {
                            "follower/config.py": "leader_feature_names = ['x0', 'x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10', 'x11', 'x12']\nleader_label_name = ['label']\nfollower_feature_names = ['x0', 'x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9']\n",
                            "follower/main.py": "# Copyright 2020 The FedLearner Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# coding: utf-8\n# pylint: disable=no-else-return, inconsistent-return-statements\n\nimport os\nimport logging\nimport numpy as np\nimport tensorflow.compat.v1 as tf\nimport fedlearner.trainer as flt\nfrom config import *\nfrom fedlearner.trainer.trainer_worker import StepLossAucMetricsHook\n\nROLE = 'follower'\n\nparser = flt.trainer_worker.create_argument_parser()\nparser.add_argument('--batch-size',\n                    type=int,\n                    default=100,\n                    help='Training batch size.')\nargs = parser.parse_args()\n\n\ndef input_fn(bridge, trainer_master):\n    dataset = flt.data.DataBlockLoader(args.batch_size, ROLE, bridge,\n                                       trainer_master).make_dataset()\n\n    def parse_fn(example):\n        feature_map = dict()\n        feature_map['example_id'] = tf.FixedLenFeature([], tf.string)\n        feature_map['raw_id'] = tf.FixedLenFeature([], tf.string)\n        for name in follower_feature_names:\n            feature_map[name] = tf.FixedLenFeature([],\n                                                   tf.float32,\n                                                   default_value=0.0)\n        features = tf.parse_example(example, features=feature_map)\n        return features, dict(y=tf.constant(0))\n\n    dataset = dataset.map(map_func=parse_fn,\n                          num_parallel_calls=tf.data.experimental.AUTOTUNE)\n    return dataset\n\n\ndef serving_input_receiver_fn():\n    feature_map = {\n        \"example_id\": tf.FixedLenFeature([], tf.string),\n        \"raw_id\": tf.FixedLenFeature([], tf.string),\n    }\n    for name in follower_feature_names:\n        feature_map[name] = tf.FixedLenFeature([],\n                                               tf.float32,\n                                               default_value=0.0)\n    record_batch = tf.placeholder(dtype=tf.string, name='examples')\n    features = tf.parse_example(record_batch, features=feature_map)\n    features['act1_f'] = tf.placeholder(dtype=tf.float32, name='act1_f')\n    receiver_tensors = {'examples': record_batch, 'act1_f': features['act1_f']}\n    return tf.estimator.export.ServingInputReceiver(features, receiver_tensors)\n\n\ndef model_fn(model, features, labels, mode):\n    logging.info('model_fn: mode %s', mode)\n    x = [\n        tf.expand_dims(features[name], axis=-1)\n        for name in follower_feature_names\n    ]\n    x = tf.concat(x, axis=-1)\n\n    w1f = tf.get_variable(\n        'w1l',\n        shape=[len(follower_feature_names),\n               len(leader_label_name)],\n        dtype=tf.float32,\n        initializer=tf.random_uniform_initializer(-0.01, 0.01))\n    b1f = tf.get_variable('b1l',\n                          shape=[len(leader_label_name)],\n                          dtype=tf.float32,\n                          initializer=tf.zeros_initializer())\n\n    act1_f = tf.nn.bias_add(tf.matmul(x, w1f), b1f)\n\n    if mode == tf.estimator.ModeKeys.PREDICT:\n        return model.make_spec(mode=mode, predictions=act1_f)\n\n    if mode == tf.estimator.ModeKeys.TRAIN:\n        gact1_f = model.send('act1_f', act1_f, require_grad=True)\n    elif mode == tf.estimator.ModeKeys.EVAL:\n        model.send('act1_f', act1_f, require_grad=False)\n\n    #acc = model.recv('acc', tf.float32, require_grad=False)\n    auc = model.recv('auc', tf.float32, require_grad=False)\n    loss = model.recv('loss', tf.float32, require_grad=False)\n    logging_hook = tf.train.LoggingTensorHook({\n        'auc': auc, 'loss': loss,\n    }, every_n_iter=10)\n    step_metric_hook = StepLossAucMetricsHook(loss_tensor=loss, auc_tensor=auc)\n\n    global_step = tf.train.get_or_create_global_step()\n    if mode == tf.estimator.ModeKeys.TRAIN:\n        optimizer = tf.train.GradientDescentOptimizer(0.1)\n        train_op = model.minimize(optimizer,\n                                  act1_f,\n                                  grad_loss=gact1_f,\n                                  global_step=global_step)\n        return model.make_spec(mode,\n                               loss=tf.math.reduce_mean(act1_f),\n                               train_op=train_op,\n                               training_hooks=[logging_hook, step_metric_hook])\n    if mode == tf.estimator.ModeKeys.EVAL:\n        fake_loss = tf.reduce_mean(act1_f)\n        return model.make_spec(mode=mode, loss=fake_loss,\n                               evaluation_hooks=[logging_hook, step_metric_hook])\n\n\nif __name__ == '__main__':\n    logging.basicConfig(level=logging.INFO)\n    flt.trainer_worker.train(ROLE, args, input_fn, model_fn,\n                             serving_input_receiver_fn)\n",
                            "leader/config.py": "leader_feature_names = ['x0', 'x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10', 'x11', 'x12']\nleader_label_name = ['label']\nfollower_feature_names = ['x0', 'x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9']\n",
                            "leader/main.py": "# Copyright 2020 The FedLearner Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# coding: utf-8\n# pylint: disable=no-else-return, inconsistent-return-statements\n\nimport os\nimport logging\nimport tensorflow.compat.v1 as tf\nimport fedlearner.trainer as flt\nfrom config import *\nfrom fedlearner.trainer.trainer_worker import StepLossAucMetricsHook\n\nROLE = 'leader'\n\nparser = flt.trainer_worker.create_argument_parser()\nparser.add_argument('--batch-size',\n                    type=int,\n                    default=100,\n                    help='Training batch size.')\nargs = parser.parse_args()\n\n\ndef input_fn(bridge, trainer_master):\n    dataset = flt.data.DataBlockLoader(args.batch_size, ROLE, bridge,\n                                       trainer_master).make_dataset()\n\n    def parse_fn(example):\n        feature_map = dict()\n        feature_map['example_id'] = tf.FixedLenFeature([], tf.string)\n        feature_map['raw_id'] = tf.FixedLenFeature([], tf.string)\n        for name in leader_feature_names:\n            feature_map[name] = tf.FixedLenFeature([],\n                                                   tf.float32,\n                                                   default_value=0.0)\n        label_map = {}\n        for name in leader_label_name:\n            label_map[name] = tf.FixedLenFeature([],\n                                                 tf.float32,\n                                                 default_value=0.0)\n        features = tf.parse_example(example, features=feature_map)\n        labels = tf.parse_example(example, features=label_map)\n        return features, labels\n\n    dataset = dataset.map(map_func=parse_fn,\n                          num_parallel_calls=tf.data.experimental.AUTOTUNE)\n    return dataset\n\n\ndef serving_input_receiver_fn():\n    feature_map = {\n        \"example_id\": tf.FixedLenFeature([], tf.string),\n        \"raw_id\": tf.FixedLenFeature([], tf.string),\n    }\n    for name in leader_feature_names:\n        feature_map[name] = tf.FixedLenFeature([],\n                                               tf.float32,\n                                               default_value=0.0)\n    record_batch = tf.placeholder(dtype=tf.string, name='examples')\n    features = tf.parse_example(record_batch, features=feature_map)\n    features['act1_f'] = tf.placeholder(dtype=tf.float32, name='act1_f')\n    receiver_tensors = {'examples': record_batch, 'act1_f': features['act1_f']}\n    return tf.estimator.export.ServingInputReceiver(features, receiver_tensors)\n\n\ndef model_fn(model, features, labels, mode):\n    logging.info('model_fn: mode %s', mode)\n    x = [\n        tf.expand_dims(features[name], axis=-1)\n        for name in leader_feature_names\n    ]\n    x = tf.concat(x, axis=-1)\n\n    w1l = tf.get_variable(\n        'w1l',\n        shape=[len(leader_feature_names),\n               len(leader_label_name)],\n        dtype=tf.float32,\n        initializer=tf.random_uniform_initializer(-0.01, 0.01))\n    b1l = tf.get_variable('b1l',\n                          shape=[len(leader_label_name)],\n                          dtype=tf.float32,\n                          initializer=tf.zeros_initializer())\n\n    act1_l = tf.nn.bias_add(tf.matmul(x, w1l), b1l)\n    if mode == tf.estimator.ModeKeys.TRAIN:\n        act1_f = model.recv('act1_f', tf.float32, require_grad=True)\n    elif mode == tf.estimator.ModeKeys.EVAL:\n        act1_f = model.recv('act1_f', tf.float32, require_grad=False)\n    else:\n        act1_f = features['act1_f']\n    logits = act1_l + act1_f\n    pred = tf.math.sigmoid(logits)\n\n    if mode == tf.estimator.ModeKeys.PREDICT:\n        return model.make_spec(mode=mode, predictions=pred)\n\n    y = [tf.expand_dims(labels[name], axis=-1) for name in leader_label_name]\n    y = tf.concat(y, axis=-1)\n\n    loss = tf.nn.sigmoid_cross_entropy_with_logits(labels=y, logits=logits)\n    _, auc = tf.metrics.auc(labels=y, predictions=pred)\n    #correct = tf.nn.in_top_k(predictions=logits, targets=y, k=1)\n    #acc = tf.reduce_mean(input_tensor=tf.cast(correct, tf.float32))\n    logging_hook = tf.train.LoggingTensorHook({\n    #    'acc': acc,\n        'auc': auc,\n        'loss': loss,\n    }, every_n_iter=10)\n    step_metric_hook = StepLossAucMetricsHook(loss_tensor=loss, auc_tensor=auc)\n    #model.send('acc', acc, require_grad=False)\n    model.send('auc', auc, require_grad=False)\n    model.send('loss', loss, require_grad=False)\n\n    global_step = tf.train.get_or_create_global_step()\n    if mode == tf.estimator.ModeKeys.TRAIN:\n        optimizer = tf.train.AdamOptimizer(1e-4)\n        train_op = model.minimize(optimizer, loss, global_step=global_step)\n        return model.make_spec(mode=mode,\n                               loss=loss,\n                               train_op=train_op,\n                               training_hooks=[logging_hook, step_metric_hook])\n\n    if mode == tf.estimator.ModeKeys.EVAL:\n        loss_pair = tf.metrics.mean(loss)\n        return model.make_spec(mode=mode,\n                               loss=loss,\n                               eval_metric_ops={'loss': loss_pair},\n                               evaluation_hooks=[logging_hook, step_metric_hook])\n\n\nif __name__ == '__main__':\n    logging.basicConfig(level=logging.INFO)\n    flt.trainer_worker.train(ROLE, args, input_fn, model_fn,\n                             serving_input_receiver_fn)\n",
                            "main.py": ""
                        },
                        "value": "{\"main.py\":\"\",\"leader/main.py\":\"# Copyright 2020 The FedLearner Authors. All Rights Reserved.\\n#\\n# Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n# you may not use this file except in compliance with the License.\\n# You may obtain a copy of the License at\\n#\\n#     http://www.apache.org/licenses/LICENSE-2.0\\n#\\n# Unless required by applicable law or agreed to in writing, software\\n# distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n# See the License for the specific language governing permissions and\\n# limitations under the License.\\n\\n# coding: utf-8\\n# pylint: disable=no-else-return, inconsistent-return-statements\\n\\nimport os\\nimport logging\\nimport tensorflow.compat.v1 as tf\\nimport fedlearner.trainer as flt\\nfrom config import *\\nfrom fedlearner.trainer.trainer_worker import StepLossAucMetricsHook\\n\\nROLE = 'leader'\\n\\nparser = flt.trainer_worker.create_argument_parser()\\nparser.add_argument('--batch-size',\\n                    type=int,\\n                    default=100,\\n                    help='Training batch size.')\\nargs = parser.parse_args()\\n\\n\\ndef input_fn(bridge, trainer_master):\\n    dataset = flt.data.DataBlockLoader(args.batch_size, ROLE, bridge,\\n                                       trainer_master).make_dataset()\\n\\n    def parse_fn(example):\\n        feature_map = dict()\\n        feature_map['example_id'] = tf.FixedLenFeature([], tf.string)\\n        feature_map['raw_id'] = tf.FixedLenFeature([], tf.string)\\n        for name in leader_feature_names:\\n            feature_map[name] = tf.FixedLenFeature([],\\n                                                   tf.float32,\\n                                                   default_value=0.0)\\n        label_map = {}\\n        for name in leader_label_name:\\n            label_map[name] = tf.FixedLenFeature([],\\n                                                 tf.float32,\\n                                                 default_value=0.0)\\n        features = tf.parse_example(example, features=feature_map)\\n        labels = tf.parse_example(example, features=label_map)\\n        return features, labels\\n\\n    dataset = dataset.map(map_func=parse_fn,\\n                          num_parallel_calls=tf.data.experimental.AUTOTUNE)\\n    return dataset\\n\\n\\ndef serving_input_receiver_fn():\\n    feature_map = {\\n        \\\"example_id\\\": tf.FixedLenFeature([], tf.string),\\n        \\\"raw_id\\\": tf.FixedLenFeature([], tf.string),\\n    }\\n    for name in leader_feature_names:\\n        feature_map[name] = tf.FixedLenFeature([],\\n                                               tf.float32,\\n                                               default_value=0.0)\\n    record_batch = tf.placeholder(dtype=tf.string, name='examples')\\n    features = tf.parse_example(record_batch, features=feature_map)\\n    features['act1_f'] = tf.placeholder(dtype=tf.float32, name='act1_f')\\n    receiver_tensors = {'examples': record_batch, 'act1_f': features['act1_f']}\\n    return tf.estimator.export.ServingInputReceiver(features, receiver_tensors)\\n\\n\\ndef model_fn(model, features, labels, mode):\\n    logging.info('model_fn: mode %s', mode)\\n    x = [\\n        tf.expand_dims(features[name], axis=-1)\\n        for name in leader_feature_names\\n    ]\\n    x = tf.concat(x, axis=-1)\\n\\n    w1l = tf.get_variable(\\n        'w1l',\\n        shape=[len(leader_feature_names),\\n               len(leader_label_name)],\\n        dtype=tf.float32,\\n        initializer=tf.random_uniform_initializer(-0.01, 0.01))\\n    b1l = tf.get_variable('b1l',\\n                          shape=[len(leader_label_name)],\\n                          dtype=tf.float32,\\n                          initializer=tf.zeros_initializer())\\n\\n    act1_l = tf.nn.bias_add(tf.matmul(x, w1l), b1l)\\n    if mode == tf.estimator.ModeKeys.TRAIN:\\n        act1_f = model.recv('act1_f', tf.float32, require_grad=True)\\n    elif mode == tf.estimator.ModeKeys.EVAL:\\n        act1_f = model.recv('act1_f', tf.float32, require_grad=False)\\n    else:\\n        act1_f = features['act1_f']\\n    logits = act1_l + act1_f\\n    pred = tf.math.sigmoid(logits)\\n\\n    if mode == tf.estimator.ModeKeys.PREDICT:\\n        return model.make_spec(mode=mode, predictions=pred)\\n\\n    y = [tf.expand_dims(labels[name], axis=-1) for name in leader_label_name]\\n    y = tf.concat(y, axis=-1)\\n\\n    loss = tf.nn.sigmoid_cross_entropy_with_logits(labels=y, logits=logits)\\n    _, auc = tf.metrics.auc(labels=y, predictions=pred)\\n    #correct = tf.nn.in_top_k(predictions=logits, targets=y, k=1)\\n    #acc = tf.reduce_mean(input_tensor=tf.cast(correct, tf.float32))\\n    logging_hook = tf.train.LoggingTensorHook({\\n    #    'acc': acc,\\n        'auc': auc,\\n        'loss': loss,\\n    }, every_n_iter=10)\\n    step_metric_hook = StepLossAucMetricsHook(loss_tensor=loss, auc_tensor=auc)\\n    #model.send('acc', acc, require_grad=False)\\n    model.send('auc', auc, require_grad=False)\\n    model.send('loss', loss, require_grad=False)\\n\\n    global_step = tf.train.get_or_create_global_step()\\n    if mode == tf.estimator.ModeKeys.TRAIN:\\n        optimizer = tf.train.AdamOptimizer(1e-4)\\n        train_op = model.minimize(optimizer, loss, global_step=global_step)\\n        return model.make_spec(mode=mode,\\n                               loss=loss,\\n                               train_op=train_op,\\n                               training_hooks=[logging_hook, step_metric_hook])\\n\\n    if mode == tf.estimator.ModeKeys.EVAL:\\n        loss_pair = tf.metrics.mean(loss)\\n        return model.make_spec(mode=mode,\\n                               loss=loss,\\n                               eval_metric_ops={'loss': loss_pair},\\n                               evaluation_hooks=[logging_hook, step_metric_hook])\\n\\n\\nif __name__ == '__main__':\\n    logging.basicConfig(level=logging.INFO)\\n    flt.trainer_worker.train(ROLE, args, input_fn, model_fn,\\n                             serving_input_receiver_fn)\\n\",\"follower/main.py\":\"# Copyright 2020 The FedLearner Authors. All Rights Reserved.\\n#\\n# Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n# you may not use this file except in compliance with the License.\\n# You may obtain a copy of the License at\\n#\\n#     http://www.apache.org/licenses/LICENSE-2.0\\n#\\n# Unless required by applicable law or agreed to in writing, software\\n# distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n# See the License for the specific language governing permissions and\\n# limitations under the License.\\n\\n# coding: utf-8\\n# pylint: disable=no-else-return, inconsistent-return-statements\\n\\nimport os\\nimport logging\\nimport numpy as np\\nimport tensorflow.compat.v1 as tf\\nimport fedlearner.trainer as flt\\nfrom config import *\\nfrom fedlearner.trainer.trainer_worker import StepLossAucMetricsHook\\n\\nROLE = 'follower'\\n\\nparser = flt.trainer_worker.create_argument_parser()\\nparser.add_argument('--batch-size',\\n                    type=int,\\n                    default=100,\\n                    help='Training batch size.')\\nargs = parser.parse_args()\\n\\n\\ndef input_fn(bridge, trainer_master):\\n    dataset = flt.data.DataBlockLoader(args.batch_size, ROLE, bridge,\\n                                       trainer_master).make_dataset()\\n\\n    def parse_fn(example):\\n        feature_map = dict()\\n        feature_map['example_id'] = tf.FixedLenFeature([], tf.string)\\n        feature_map['raw_id'] = tf.FixedLenFeature([], tf.string)\\n        for name in follower_feature_names:\\n            feature_map[name] = tf.FixedLenFeature([],\\n                                                   tf.float32,\\n                                                   default_value=0.0)\\n        features = tf.parse_example(example, features=feature_map)\\n        return features, dict(y=tf.constant(0))\\n\\n    dataset = dataset.map(map_func=parse_fn,\\n                          num_parallel_calls=tf.data.experimental.AUTOTUNE)\\n    return dataset\\n\\n\\ndef serving_input_receiver_fn():\\n    feature_map = {\\n        \\\"example_id\\\": tf.FixedLenFeature([], tf.string),\\n        \\\"raw_id\\\": tf.FixedLenFeature([], tf.string),\\n    }\\n    for name in follower_feature_names:\\n        feature_map[name] = tf.FixedLenFeature([],\\n                                               tf.float32,\\n                                               default_value=0.0)\\n    record_batch = tf.placeholder(dtype=tf.string, name='examples')\\n    features = tf.parse_example(record_batch, features=feature_map)\\n    features['act1_f'] = tf.placeholder(dtype=tf.float32, name='act1_f')\\n    receiver_tensors = {'examples': record_batch, 'act1_f': features['act1_f']}\\n    return tf.estimator.export.ServingInputReceiver(features, receiver_tensors)\\n\\n\\ndef model_fn(model, features, labels, mode):\\n    logging.info('model_fn: mode %s', mode)\\n    x = [\\n        tf.expand_dims(features[name], axis=-1)\\n        for name in follower_feature_names\\n    ]\\n    x = tf.concat(x, axis=-1)\\n\\n    w1f = tf.get_variable(\\n        'w1l',\\n        shape=[len(follower_feature_names),\\n               len(leader_label_name)],\\n        dtype=tf.float32,\\n        initializer=tf.random_uniform_initializer(-0.01, 0.01))\\n    b1f = tf.get_variable('b1l',\\n                          shape=[len(leader_label_name)],\\n                          dtype=tf.float32,\\n                          initializer=tf.zeros_initializer())\\n\\n    act1_f = tf.nn.bias_add(tf.matmul(x, w1f), b1f)\\n\\n    if mode == tf.estimator.ModeKeys.PREDICT:\\n        return model.make_spec(mode=mode, predictions=act1_f)\\n\\n    if mode == tf.estimator.ModeKeys.TRAIN:\\n        gact1_f = model.send('act1_f', act1_f, require_grad=True)\\n    elif mode == tf.estimator.ModeKeys.EVAL:\\n        model.send('act1_f', act1_f, require_grad=False)\\n\\n    #acc = model.recv('acc', tf.float32, require_grad=False)\\n    auc = model.recv('auc', tf.float32, require_grad=False)\\n    loss = model.recv('loss', tf.float32, require_grad=False)\\n    logging_hook = tf.train.LoggingTensorHook({\\n        'auc': auc, 'loss': loss,\\n    }, every_n_iter=10)\\n    step_metric_hook = StepLossAucMetricsHook(loss_tensor=loss, auc_tensor=auc)\\n\\n    global_step = tf.train.get_or_create_global_step()\\n    if mode == tf.estimator.ModeKeys.TRAIN:\\n        optimizer = tf.train.GradientDescentOptimizer(0.1)\\n        train_op = model.minimize(optimizer,\\n                                  act1_f,\\n                                  grad_loss=gact1_f,\\n                                  global_step=global_step)\\n        return model.make_spec(mode,\\n                               loss=tf.math.reduce_mean(act1_f),\\n                               train_op=train_op,\\n                               training_hooks=[logging_hook, step_metric_hook])\\n    if mode == tf.estimator.ModeKeys.EVAL:\\n        fake_loss = tf.reduce_mean(act1_f)\\n        return model.make_spec(mode=mode, loss=fake_loss,\\n                               evaluation_hooks=[logging_hook, step_metric_hook])\\n\\n\\nif __name__ == '__main__':\\n    logging.basicConfig(level=logging.INFO)\\n    flt.trainer_worker.train(ROLE, args, input_fn, model_fn,\\n                             serving_input_receiver_fn)\\n\",\"follower/config.py\":\"leader_feature_names = ['x0', 'x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10', 'x11', 'x12']\\nleader_label_name = ['label']\\nfollower_feature_names = ['x0', 'x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9']\\n\",\"leader/config.py\":\"leader_feature_names = ['x0', 'x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10', 'x11', 'x12']\\nleader_label_name = ['label']\\nfollower_feature_names = ['x0', 'x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9']\\n\"}",
                        "value_type": "CODE",
                        "widget_schema": "{\"component\":\"Code\",\"required\":true}"
                    }
                ],
                "yaml_template": "{\n  \"apiVersion\": \"fedlearner.k8s.io/v1alpha1\",\n  \"kind\": \"FedApp\",\n  \"metadata\": {\n    \"name\": self.name,\n    \"namespace\": system.variables.namespace,\n    \"labels\": dict(system.variables.labels)\n  },\n  \"spec\": {\n    \"activeDeadlineSeconds\": 1200, \n    \"fedReplicaSpecs\": {\n      \"Master\": {\n        \"backoffLimit\": 1,\n        \"mustSuccess\": False,\n        \"template\": {\n          \"spec\": {\n            \"restartPolicy\": \"Never\",\n            \"containers\": [\n              {\n                \"env\": system.basic_envs_list + [\n                  {\n                    \"name\": \"STORAGE_ROOT_PATH\",\n                    \"value\": project.variables.storage_root_path\n                  },\n                  {\n                    \"name\": \"ROLE\",\n                    \"value\": workflow.variables.role.lower()\n                  },\n                  {\n                    \"name\": \"APPLICATION_ID\",\n                    \"value\": self.name\n                  },\n                  {\n                    \"name\": \"OUTPUT_BASE_DIR\",\n                    \"value\": project.variables.storage_root_path + \"/job_output/\" + self.name\n                  },\n                  {\n                    \"name\": \"EGRESS_URL\",\n                    \"value\": \"fedlearner-stack-ingress-nginx-controller.default.svc:80\"\n                  },\n                  {\n                    \"name\": \"EGRESS_HOST\",\n                    \"value\": project.participants[0].egress_host\n                  },\n                  {\n                    \"name\": \"EGRESS_DOMAIN\",\n                    \"value\": project.participants[0].egress_domain\n                  },\n                  {\n                    \"name\": \"EPOCH_NUM\",\n                    \"value\": str(int(self.variables.epoch_num))\n                  },\n                  {\n                    \"name\": \"START_DATE\",\n                    \"value\": str(None)\n                  },\n                  {\n                    \"name\": \"END_DATE\",\n                    \"value\": str(None)\n                  },\n                  {\n                    \"name\": \"DATA_SOURCE\",\n                    \"value\": workflow.jobs['data-join-job'].name\n                  },\n                  {\n                    \"name\": \"ONLINE_TRAINING\",\n                    \"value\": \"\"\n                  },\n                  {\n                    \"name\": \"SPARSE_ESTIMATOR\",\n                    \"value\": str(False)\n                  },\n                  {\n                    \"name\": \"CODE_KEY\",\n                    \"value\": \"\"\n                  },\n                  {\n                    \"name\": \"CODE_TAR\",\n                    \"value\": self.variables.code_tar\n                  },\n                  {\n                    \"name\": \"CHECKPOINT_PATH\",\n                    \"value\": \"\"\n                  },\n                  {\n                    \"name\": \"LOAD_CHECKPOINT_FILENAME\",\n                    \"value\": \"\"\n                  },\n                  {\n                    \"name\": \"LOAD_CHECKPOINT_FILENAME_WITH_PATH\",\n                    \"value\": \"\"\n                  },\n                  {\n                    \"name\": \"LOAD_CHECKPOINT_PATH\",\n                    \"value\":  \"\" and project.variables.storage_root_path + \"/job_output/\" + \"\" + \"/checkpoints\"\n                  },\n                  {\n                    \"name\": \"EXPORT_PATH\",\n                    \"value\": \"\"\n                  }\n                ] + [],\n                \"imagePullPolicy\": \"IfNotPresent\",\n                \"name\": \"tensorflow\",\n                \"volumeMounts\": list(system.variables.volume_mounts_list),\n                \"image\": workflow.variables.image,\n                \"ports\": [\n                  {\n                    \"containerPort\": 50051,\n                    \"name\": \"flapp-port\",\n                    \"protocol\": \"TCP\"\n                  },\n                  {\n                    \"containerPort\": 50052,\n                    \"name\": \"tf-port\",\n                    \"protocol\": \"TCP\"\n                  }\n                ],\n                \"command\": [\n        \"/app/deploy/scripts/trainer/run_trainer_master.sh\"\n                ],\n                \"args\": [\n                ],\n                \"resources\": {\n                  \"limits\": {\n                    \"cpu\": \"2000m\",\n                    \"memory\": \"3Gi\"\n                  },\n                  \"requests\": {\n                    \"cpu\": \"2000m\",\n                    \"memory\": \"3Gi\"\n                  }\n                }\n              }\n            ],\n            \"imagePullSecrets\": [\n              {\n                \"name\": \"regcred\"\n              }\n            ],\n            \"volumes\": list(system.variables.volumes_list)\n\n          }\n        },\n        \"replicas\": int(1)\n      },\n      \"PS\": {\n        \"backoffLimit\": 1,\n        \"mustSuccess\": False,\n        \"template\": {\n          \"spec\": {\n            \"restartPolicy\": \"Never\",\n            \"containers\": [\n              {\n                \"env\": system.basic_envs_list + [\n                  {\n                    \"name\": \"STORAGE_ROOT_PATH\",\n                    \"value\": project.variables.storage_root_path\n                  },\n                  {\n                    \"name\": \"EGRESS_URL\",\n                    \"value\": \"fedlearner-stack-ingress-nginx-controller.default.svc:80\"\n                  },\n                  {\n                    \"name\": \"EGRESS_HOST\",\n                    \"value\": project.participants[0].egress_host\n                  },\n                  {\n                    \"name\": \"EGRESS_DOMAIN\",\n                    \"value\": project.participants[0].egress_domain\n                  }\n\n                ] + [],\n                \"imagePullPolicy\": \"IfNotPresent\",\n                \"name\": \"tensorflow\",\n                \"volumeMounts\": list(system.variables.volume_mounts_list),\n                \"image\": workflow.variables.image,\n                \"ports\": [\n                  {\n                    \"containerPort\": 50051,\n                    \"name\": \"flapp-port\",\n                    \"protocol\": \"TCP\"\n                  },\n                  {\n                    \"containerPort\": 50052,\n                    \"name\": \"tf-port\",\n                    \"protocol\": \"TCP\"\n                  }\n                ],\n                \"command\": [\n        \"/app/deploy/scripts/trainer/run_trainer_ps.sh\"\n                ],\n                \"args\": [\n                ],\n                \"resources\": {\n                  \"limits\": {\n                    \"cpu\": \"2000m\",\n                    \"memory\": \"3Gi\"\n                  },\n                  \"requests\": {\n                    \"cpu\": \"2000m\",\n                    \"memory\": \"3Gi\"\n                  }\n                }\n              }\n            ],\n            \"imagePullSecrets\": [\n              {\n                \"name\": \"regcred\"\n              }\n            ],\n            \"volumes\": list(system.variables.volumes_list)\n          }\n        },\n        \"replicas\": int(1)\n      },\n      \"Worker\": {\n        \"backoffLimit\": 6,\n        \"mustSuccess\": True,\n        \"template\": {\n          \"spec\": {\n            \"restartPolicy\": \"Never\",\n            \"containers\": [\n              {\n                \"env\": system.basic_envs_list + [\n                  {\n                    \"name\": \"STORAGE_ROOT_PATH\",\n                    \"value\": project.variables.storage_root_path\n                  },\n                  {\n                    \"name\": \"ROLE\",\n                    \"value\": workflow.variables.role.lower()\n                  },\n                  {\n                    \"name\": \"APPLICATION_ID\",\n                    \"value\": self.name\n                  },\n                  {\n                    \"name\": \"OUTPUT_BASE_DIR\",\n                    \"value\": project.variables.storage_root_path + \"/job_output/\" + self.name\n                  },\n                  {\n                    \"name\": \"EGRESS_URL\",\n                    \"value\": \"fedlearner-stack-ingress-nginx-controller.default.svc:80\"\n                  },\n                  {\n                    \"name\": \"EGRESS_HOST\",\n                    \"value\": project.participants[0].egress_host\n                  },\n                  {\n                    \"name\": \"EGRESS_DOMAIN\",\n                    \"value\": project.participants[0].egress_domain\n                  },\n                  {\n                    \"name\": \"MODE\",\n                    \"value\": \"train\"\n                  },\n                  {\n                    \"name\": \"VERBOSITY\",\n                    \"value\": str(1)\n                  },\n                  {\n                    \"name\": \"CODE_KEY\",\n                    \"value\": \"\"\n                  },\n                  {\n                    \"name\": \"CODE_TAR\",\n                    \"value\": self.variables.code_tar\n                  },\n                  {\n                    \"name\": \"SAVE_CHECKPOINT_STEPS\",\n                    \"value\": str(1000)\n                  },\n                  {\n                    \"name\": \"SAVE_CHECKPOINT_SECS\",\n                    \"value\": str(None)\n                  },\n                  {\n                    \"name\": \"SPARSE_ESTIMATOR\",\n                    \"value\": str(False)\n                  },\n                  {\n                    \"name\": \"SUMMARY_SAVE_STEPS\",\n                    \"value\": str(None)\n                  }\n                ] + [],\n                \"imagePullPolicy\": \"IfNotPresent\",\n                \"name\": \"tensorflow\",\n                \"volumeMounts\": list(system.variables.volume_mounts_list),\n                \"image\": workflow.variables.image,\n                \"ports\": [\n                  {\n                    \"containerPort\": 50051,\n                    \"name\": \"flapp-port\",\n                    \"protocol\": \"TCP\"\n                  },\n                  {\n                    \"containerPort\": 50052,\n                    \"name\": \"tf-port\",\n                    \"protocol\": \"TCP\"\n                  }\n                ],\n                \"command\":[\"/bin/bash\",\"-c\"],\n                \"args\": [\"export WORKER_RANK=$$INDEX && export PEER_ADDR=$$SERVICE_ID && /app/deploy/scripts/trainer/run_trainer_worker.sh\"],\n                \"resources\": {\n                  \"limits\": {\n                    \"cpu\": \"2000m\",\n                    \"memory\": \"3Gi\"\n                  },\n                  \"requests\": {\n                    \"cpu\": \"2000m\",\n                    \"memory\": \"3Gi\"\n                  }\n                }\n              }\n            ],\n            \"imagePullSecrets\": [\n              {\n                \"name\": \"regcred\"\n              }\n            ],\n            \"volumes\": list(system.variables.volumes_list)\n          }\n        },\n        \"replicas\": int(1)\n      }\n    }\n  }\n}"
            },
            {
                "dependencies": [
                    {
                        "source": "data-join-job"
                    },
                    {
                        "source": "psi-data-join-job"
                    }
                ],
                "easy_mode": true,
                "is_federated": true,
                "job_type": "TREE_MODEL_TRAINING",
                "name": "tree-train",
                "variables": [
                    {
                        "access_mode": "PEER_WRITABLE",
                        "name": "max_depth",
                        "tag": "",
                        "typed_value": "3",
                        "value": "3",
                        "value_type": "STRING",
                        "widget_schema": "{\"component\":\"Input\",\"required\":false}"
                    },
                    {
                        "access_mode": "PEER_WRITABLE",
                        "name": "max_iters",
                        "tag": "",
                        "typed_value": "2",
                        "value": "2",
                        "value_type": "STRING",
                        "widget_schema": "{\"component\":\"Input\",\"required\":false}"
                    },
                    {
                        "access_mode": "PEER_WRITABLE",
                        "name": "file_ext",
                        "tag": "",
                        "typed_value": ".data",
                        "value": ".data",
                        "value_type": "STRING",
                        "widget_schema": "{\"component\":\"Input\",\"required\":true}"
                    },
                    {
                        "access_mode": "PEER_WRITABLE",
                        "name": "file_type",
                        "tag": "",
                        "typed_value": "tfrecord",
                        "value": "tfrecord",
                        "value_type": "STRING",
                        "widget_schema": "{\"component\":\"Input\",\"required\":true}"
                    }
                ],
                "yaml_template": "{\n  \"apiVersion\": \"fedlearner.k8s.io/v1alpha1\",\n  \"kind\": \"FLApp\",\n  \"metadata\": {\n      \"name\": self.name,\n      \"namespace\": system.variables.namespace,\n      \"annotations\":{\n          \"queue\": \"fedlearner\",\n          \"schedulerName\": \"batch\"\n      },\n    \"labels\": dict(system.variables.labels)\n  },\n  \"spec\": {\n      \"role\": str(workflow.variables.role),\n      \"cleanPodPolicy\": \"All\",\n      \"peerSpecs\": {\n          \"Leader\" if str(workflow.variables.role)==\"Follower\" else \"Follower\": {\n              \"peerURL\": \"fedlearner-stack-ingress-nginx-controller.default.svc:80\",\n              \"authority\": project.participants[0].egress_host,\n              \"extraHeaders\": {\n                  \"x-host\": \"fedlearner-operator.\" + project.participants[0].egress_domain\n              }\n          }\n      },\n      \"flReplicaSpecs\": {\n          \"Worker\": {\n              \"template\": {\n                  \"spec\": {\n                      \"restartPolicy\": \"Never\",\n                      \"containers\": [\n                          {\n                              \"env\": system.basic_envs_list + [\n                                  {\n                                      \"name\": \"STORAGE_ROOT_PATH\",\n                                      \"value\": str(project.variables.storage_root_path)\n                                  },\n                                  {\n                                      \"name\": \"ROLE\",\n                                      \"value\": str(workflow.variables.role).lower()\n                                  },\n                                  {\n                                      \"name\": \"APPLICATION_ID\",\n                                      \"value\": self.name\n                                  },\n                                  {\n                                      \"name\": \"OUTPUT_BASE_DIR\",\n                                      \"value\": str(project.variables.storage_root_path) + \"/job_output/\" + self.name\n                                  },\n                                  {\n                                      \"name\": \"EGRESS_URL\",\n                                      \"value\": \"fedlearner-stack-ingress-nginx-controller.default.svc:80\"\n                                  },\n                                  {\n                                      \"name\": \"EGRESS_HOST\",\n                                      \"value\": project.participants[0].egress_host\n                                  },\n                                  {\n                                      \"name\": \"EGRESS_DOMAIN\",\n                                      \"value\": project.participants[0].egress_domain\n                                  },\n                                  {\n                                      \"name\": \"MODE\",\n                                      \"value\": \"train\"\n                                  },\n                                  {\n                                      \"name\": \"LOSS_TYPE\",\n                                      \"value\": \"logistic\"\n                                  },\n                                  {\n                                      \"name\": \"DATA_SOURCE\",\n                                      \"value\": str(workflow.jobs['psi-data-join-job'].name)\n                                  },\n                                  {\n                                      \"name\": \"DATA_PATH\",\n                                      \"value\": \"\"\n                                  },\n                                  {\n                                      \"name\": \"VALIDATION_DATA_PATH\",\n                                      \"value\": \"\"\n                                  },\n                                  {\n                                      \"name\": \"NO_DATA\",\n                                      \"value\": str(False)\n                                  },\n                                  {\n                                      \"name\": \"FILE_EXT\",\n                                      \"value\": str(self.variables.file_ext)\n                                  },\n                                  {\n                                      \"name\": \"FILE_TYPE\",\n                                      \"value\": str(self.variables.file_type)\n                                  },\n                                  {\n                                      \"name\": \"LOAD_MODEL_PATH\",\n                                      \"value\": \"\"\n                                  },\n                                  {\n                                      \"name\": \"LOAD_MODEL_NAME\",\n                                      \"value\": \"\"\n                                  },\n                                  {\n                                      \"name\": \"VERBOSITY\",\n                                      \"value\": str(1)\n                                  },\n                                  {\n                                      \"name\": \"LEARNING_RATE\",\n                                      \"value\": str(0.3)\n                                  },\n                                  {\n                                      \"name\": \"MAX_ITERS\",\n                                      \"value\": str(int(self.variables.max_iters))\n                                  },\n                                  {\n                                      \"name\": \"MAX_DEPTH\",\n                                      \"value\": str(int(self.variables.max_depth))\n                                  },\n                                  {\n                                      \"name\": \"MAX_BINS\",\n                                      \"value\": str(33)\n                                  },\n                                  {\n                                      \"name\": \"L2_REGULARIZATION\",\n                                      \"value\": str(1.0)\n                                  },\n                                  {\n                                      \"name\": \"NUM_PARALLEL\",\n                                      \"value\": str(1)\n                                  },\n                                  {\n                                      \"name\": \"VERIFY_EXAMPLE_IDS\",\n                                      \"value\": str(False)\n                                  },\n                                  {\n                                      \"name\": \"IGNORE_FIELDS\",\n                                      \"value\": \"\"\n                                  },\n                                  {\n                                      \"name\": \"CAT_FIELDS\",\n                                      \"value\": \"\"\n                                  },\n                                  {\n                                      \"name\": \"LABEL_FIELD\",\n                                      \"value\": \"label\"\n                                  },\n                                  {\n                                      \"name\": \"SEND_SCORES_TO_FOLLOWER\",\n                                      \"value\": str(False)\n                                  },\n                                  {\n                                      \"name\": \"SEND_METRICS_TO_FOLLOWER\",\n                                      \"value\": str(False)\n                                  },\n                                  {\n                                      \"name\": \"ENABLE_PACKING\",\n                                      \"value\": str(True)\n                                  },\n                                  {\n                                      \"name\": \"ES_BATCH_SIZE\",\n                                      \"value\": str(10)\n                                  }\n                              ] + [],\n                              \"imagePullPolicy\": \"IfNotPresent\",\n                              \"name\": \"tensorflow\",\n                              \"volumeMounts\": list(system.variables.volume_mounts_list),\n                              \"image\": str(workflow.variables.image),\n                              \"ports\": [\n                                  {\n                                      \"containerPort\": 50051,\n                                      \"name\": \"flapp-port\",\n                                      \"protocol\": \"TCP\"\n                                  },\n                                  {\n                                      \"containerPort\": 50052,\n                                      \"name\": \"tf-port\",\n                                      \"protocol\": \"TCP\"\n                                  }\n                              ],\n                              \"command\": [\n                                  \"/app/deploy/scripts/wait4pair_wrapper.sh\"\n                              ],\n                              \"args\": [\n                                  \"/app/deploy/scripts/trainer/run_tree_worker.sh\"\n                              ],\n                              \"resources\": {\n                                  \"limits\": {\n                                      \"cpu\": \"2000m\",\n                                      \"memory\": \"4Gi\"\n                                  },\n                                  \"requests\": {\n                                      \"cpu\": \"2000m\",\n                                      \"memory\": \"4Gi\"\n                                  }\n                              }\n                          }\n                      ],\n                      \"imagePullSecrets\": [\n                          {\n                              \"name\": \"regcred\"\n                          }\n                      ],\n                      \"volumes\": list(system.variables.volumes_list)\n                  }\n              },\n              \"pair\": True,\n              \"replicas\": 1\n          }\n      }\n  }\n}\n"
            }
        ],
        "variables": [
            {
                "access_mode": "PEER_WRITABLE",
                "name": "image",
                "tag": "",
                "typed_value": "artifact.bytedance.com/fedlearner/fedlearner:50a6945",
                "value": "artifact.bytedance.com/fedlearner/fedlearner:50a6945",
                "value_type": "STRING",
                "widget_schema": "{\"component\":\"Input\",\"required\":true}"
            },
            {
                "access_mode": "PEER_WRITABLE",
                "name": "num_partitions",
                "tag": "",
                "typed_value": "1",
                "value": "1",
                "value_type": "STRING",
                "widget_schema": "{\"component\":\"Input\",\"required\":true}"
            },
            {
                "access_mode": "PEER_WRITABLE",
                "name": "role",
                "tag": "",
                "typed_value": "Leader",
                "value": "Leader",
                "value_type": "STRING",
                "widget_schema": "{\"component\":\"Select\",\"required\":true,\"enum\":[\"Leader\",\"Follower\"]}"
            },
            {
                "access_mode": "PEER_WRITABLE",
                "name": "input_base_dir",
                "tag": "",
                "typed_value": "/app/deploy/integrated_test/credit_default",
                "value": "/app/deploy/integrated_test/credit_default",
                "value_type": "STRING",
                "widget_schema": "{\"component\":\"Input\",\"required\":true}"
            },
            {
                "access_mode": "PEER_WRITABLE",
                "name": "file_wildcard",
                "tag": "",
                "typed_value": "*guest.csv",
                "value": "*guest.csv",
                "value_type": "STRING",
                "widget_schema": "{\"component\":\"Input\",\"required\":true}"
            },
            {
                "access_mode": "PEER_WRITABLE",
                "name": "input_data_format",
                "tag": "",
                "typed_value": "CSV_DICT",
                "value": "CSV_DICT",
                "value_type": "STRING",
                "widget_schema": "{\"component\":\"Select\",\"required\":true,\"enum\":[\"CSV_DICT\",\"TF_RECORD\"]}"
            }
        ]
    },
    "editor_info": {
        "yaml_editor_infos": {
            "data-join-job": {
                "meta_yaml": "{\n  \"apiVersion\": \"fedlearner.k8s.io/v1alpha1\",\n  \"kind\": \"FLApp\",\n  \"metadata\": {\n    \"name\": self.name,\n    \"namespace\": system.variables.namespace,\n    \"annotations\":{\n        \"queue\": \"fedlearner\",\n        \"schedulerName\": \"batch\"\n    },\n    \"labels\": ${Slot_labels}\n  },\n  \"spec\": {\n    \"role\": ${Slot_role},\n    \"cleanPodPolicy\": \"All\",\n    \"peerSpecs\": {\n      \"Leader\" if ${Slot_role}==\"Follower\" else \"Follower\": {\n        \"peerURL\": \"fedlearner-stack-ingress-nginx-controller.default.svc:80\",\n        \"authority\": project.participants[0].egress_host,\n        \"extraHeaders\": {\n          \"x-host\": \"fedlearner-operator.\" + project.participants[0].egress_domain\n        }\n      }\n    },\n    \"flReplicaSpecs\": {\n      \"Master\": {\n        \"template\": {\n          \"spec\": {\n            \"restartPolicy\": \"Never\",\n            \"containers\": [\n              {\n                \"env\": system.basic_envs_list + [\n                  {\n                    \"name\": \"STORAGE_ROOT_PATH\",\n                    \"value\": ${Slot_storage_root_path}\n                  },\n                  {\n                    \"name\": \"ROLE\",\n                    \"value\": ${Slot_role}.lower()\n                  },\n                  {\n                    \"name\": \"APPLICATION_ID\",\n                    \"value\": self.name\n                  },\n                  {\n                    \"name\": \"OUTPUT_BASE_DIR\",\n                    \"value\": ${Slot_storage_root_path} + \"/data_source/\" + self.name\n                  },\n                  {\n                    \"name\": \"EGRESS_URL\",\n                    \"value\": \"fedlearner-stack-ingress-nginx-controller.default.svc:80\"\n                  },\n                  {\n                    \"name\": \"EGRESS_HOST\",\n                    \"value\": project.participants[0].egress_host\n                  },\n                  {\n                    \"name\": \"EGRESS_DOMAIN\",\n                    \"value\": project.participants[0].egress_domain\n                  },\n                  {\n                    \"name\": \"BATCH_MODE\",\n                    \"value\": ${Slot_batch_mode}\n                  },\n                  {\n                    \"name\": \"PARTITION_NUM\",\n                    \"value\": str(${Slot_partition_num})\n                  },\n                  {\n                    \"name\": \"START_TIME\",\n                    \"value\": str(${Slot_start_time})\n                  },\n                  {\n                    \"name\": \"END_TIME\",\n                    \"value\": str(${Slot_end_time})\n                  },\n                  {\n                    \"name\": \"RAW_DATA_SUB_DIR\",\n                    \"value\": \"portal_publish_dir/\" + ${Slot_raw_data_name}\n                  },\n                  {\n                    # not work, remove it after prepare_launch_data_join_cli been removed\n                    \"name\": \"NEGATIVE_SAMPLING_RATE\",\n                    \"value\": str(${Slot_negative_sampling_rate})\n                  }\n                ]  + ${Slot_master_envs},\n                \"imagePullPolicy\": \"IfNotPresent\",\n                \"name\": \"tensorflow\",\n                \"volumeMounts\":\n                  ${Slot_volume_mounts}\n                ,\n                \"image\": ${Slot_image},\n                \"ports\": [\n                  {\n                    \"containerPort\": 50051,\n                    \"name\": \"flapp-port\",\n                    \"protocol\": \"TCP\"\n                  }\n                ],\n                \"command\": [\n                  \"/app/deploy/scripts/wait4pair_wrapper.sh\"\n                ],\n                \"args\": [\n                  \"/app/deploy/scripts/data_join/run_data_join_master.sh\"\n                ],\n                \"resources\": {\n                  \"limits\": {\n                    \"cpu\": ${Slot_master_cpu},\n                    \"memory\": ${Slot_master_memory}\n                  },\n                  \"requests\": {\n                    \"cpu\": ${Slot_master_cpu},\n                    \"memory\": ${Slot_master_memory}\n                  }\n                }\n              }\n            ],\n            \"imagePullSecrets\": [\n              {\n                \"name\": \"regcred\"\n              }\n            ],\n            \"volumes\":\n        ${Slot_volumes}\n\n          }\n        },\n        \"pair\": true,\n        \"replicas\": ${Slot_master_replicas}\n      },\n      \"Worker\": {\n        \"template\": {\n          \"spec\": {\n            \"restartPolicy\": \"Never\",\n            \"containers\": [\n              {\n                \"env\": system.basic_envs_list + [\n                  {\n                    \"name\": \"STORAGE_ROOT_PATH\",\n                    \"value\": ${Slot_storage_root_path}\n                  },\n                  {\n                    \"name\": \"ROLE\",\n                    \"value\": ${Slot_role}.lower()\n                  },\n                  {\n                    \"name\": \"APPLICATION_ID\",\n                    \"value\": self.name\n                  },\n                  {\n                    \"name\": \"OUTPUT_BASE_DIR\",\n                    \"value\": ${Slot_storage_root_path} + \"/data_source/\" + self.name\n                  },\n                  {\n                    \"name\": \"EGRESS_URL\",\n                    \"value\": \"fedlearner-stack-ingress-nginx-controller.default.svc:80\"\n                  },\n                  {\n                    \"name\": \"EGRESS_HOST\",\n                    \"value\": project.participants[0].egress_host\n                  },\n                  {\n                    \"name\": \"EGRESS_DOMAIN\",\n                    \"value\": project.participants[0].egress_domain\n                  },\n                  {\n                    \"name\": \"PARTITION_NUM\",\n                    \"value\": str(${Slot_partition_num})\n                  },\n                  {\n                    \"name\": \"RAW_DATA_SUB_DIR\",\n                    \"value\": \"portal_publish_dir/\" + ${Slot_raw_data_name}\n                  },\n                  {\n                    \"name\": \"DATA_BLOCK_DUMP_INTERVAL\",\n                    \"value\": str(${Slot_data_block_dump_interval})\n                  },\n                  {\n                    \"name\": \"DATA_BLOCK_DUMP_THRESHOLD\",\n                    \"value\": str(${Slot_data_block_dump_threshold})\n                  },\n                  {\n                    \"name\": \"EXAMPLE_ID_DUMP_INTERVAL\",\n                    \"value\": str(${Slot_example_id_dump_interval})\n                  },\n                  {\n                    \"name\": \"EXAMPLE_ID_DUMP_THRESHOLD\",\n                    \"value\": str(${Slot_example_id_dump_threshold})\n                  },\n                  {\n                    \"name\": \"MIN_MATCHING_WINDOW\",\n                    \"value\": str(${Slot_min_matching_window})\n                  },\n                  {\n                    \"name\": \"MAX_MATCHING_WINDOW\",\n                    \"value\": str(${Slot_max_matching_window})\n                  },\n                  {\n                    \"name\": \"RAW_DATA_ITER\",\n                    \"value\": ${Slot_raw_data_iter}\n                  },\n                  {\n                    \"name\": \"ENABLE_NEGATIVE_EXAMPLE_GENERATOR\",\n                    \"value\": str(${Slot_enable_negative_example_generator})\n                  },\n                  {\n                    \"name\": \"NEGATIVE_SAMPLING_RATE\",\n                    \"value\": str(${Slot_negative_sampling_rate})\n                  },\n                ] + ${Slot_worker_envs},\n                \"imagePullPolicy\": \"IfNotPresent\",\n                \"name\": \"tensorflow\",\n                \"volumeMounts\":\n                  ${Slot_volume_mounts}\n                ,\n                \"image\": ${Slot_image},\n                \"ports\": [\n                  {\n                    \"containerPort\": 50051,\n                    \"name\": \"flapp-port\",\n                    \"protocol\": \"TCP\"\n                  }\n                ],\n                \"command\": [\n                  \"/app/deploy/scripts/wait4pair_wrapper.sh\"\n                ],\n                \"args\": [\n                  \"/app/deploy/scripts/data_join/run_data_join_worker.sh\"\n                ],\n                \"resources\": {\n                  \"limits\": {\n                    \"cpu\": ${Slot_worker_cpu},\n                    \"memory\": ${Slot_worker_memory}\n                  },\n                  \"requests\": {\n                    \"cpu\": ${Slot_worker_cpu},\n                    \"memory\": ${Slot_worker_memory}\n                  }\n                }\n              }\n            ],\n            \"imagePullSecrets\": [\n              {\n                \"name\": \"regcred\"\n              }\n            ],\n            \"volumes\":\n        ${Slot_volumes}\n\n          }\n        },\n        \"pair\": true,\n        \"replicas\": ${Slot_partition_num}\n      }\n    }\n  }\n}\n",
                "slots": {
                    "Slot_batch_mode": {
                        "default": "",
                        "default_value": "--batch_mode",
                        "help": "如果为空则为常驻求交",
                        "label": "是否为批处理模式",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_data_block_dump_interval": {
                        "default": "",
                        "default_value": -1.0,
                        "help": "建议不修改，最多每隔多少时间（实际时间，非样本时间）就dump一次data block，小于0则无此限制",
                        "label": "数据dump时间间隔",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "INT"
                    },
                    "Slot_data_block_dump_threshold": {
                        "default": "",
                        "default_value": 4096.0,
                        "help": "建议不修改，最多多少个样本就dump为一个data block，小于等于0则无此限制",
                        "label": "数据dump临界点",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "INT"
                    },
                    "Slot_enable_negative_example_generator": {
                        "default": "",
                        "default_value": false,
                        "help": "建议不修改，是否开启负采样，当follower求交时遇到无法匹配上的leader的example id，会以negative_sampling_rate为概率生成一个新的样本。",
                        "label": "负采样比例",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "BOOL"
                    },
                    "Slot_end_time": {
                        "default": "",
                        "default_value": 999999999999.0,
                        "help": "建议不修改，使用自这个时间以前的数据，仅从文件名筛选所以格式依据文件名（yyyymmdd或timestamp）",
                        "label": "数据末尾时间",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "INT"
                    },
                    "Slot_example_id_dump_interval": {
                        "default": "",
                        "default_value": -1.0,
                        "help": "建议不修改，最多每隔多少时间（实际时间，非样本时间）就dump一次example id，小于0则无此限制",
                        "label": "数据id dump时间间隔",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "INT"
                    },
                    "Slot_example_id_dump_threshold": {
                        "default": "",
                        "default_value": 4096.0,
                        "help": "建议不修改，最多每隔多少时间（实际时间，非样本时间）就dump一次example id，小于0则无此限制",
                        "label": "数据id dump临界点",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "INT"
                    },
                    "Slot_image": {
                        "default": "",
                        "default_value": "artifact.bytedance.com/fedlearner/fedlearner:50a6945",
                        "help": "建议不修改，指定Pod中运行的容器镜像地址，修改此项可能导致本基本模版不适用",
                        "label": "容器镜像",
                        "reference": "workflow.variables.image",
                        "reference_type": "WORKFLOW",
                        "value_type": "STRING"
                    },
                    "Slot_labels": {
                        "default": "",
                        "default_value": {},
                        "help": "建议不修改，格式： {}",
                        "label": "FLAPP额外元信息",
                        "reference": "system.variables.labels",
                        "reference_type": "SYSTEM",
                        "value_type": "OBJECT"
                    },
                    "Slot_master_cpu": {
                        "default": "",
                        "default_value": "2000m",
                        "help": "Master Pod 所分配的CPU资源（request和limit一致）",
                        "label": "Master的CPU",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_master_envs": {
                        "default": "",
                        "default_value": [],
                        "help": "数组类型，master pod额外的环境变量",
                        "label": "Master额外环境变量",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "LIST"
                    },
                    "Slot_master_memory": {
                        "default": "",
                        "default_value": "3Gi",
                        "help": "Master Pod 所分配的内存资源（request和limit一致）",
                        "label": "Master的内存",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_master_replicas": {
                        "default": "",
                        "default_value": 1.0,
                        "help": "同时运行的完全相同的Master Pods数量",
                        "label": "Master的Pod个数",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "INT"
                    },
                    "Slot_max_matching_window": {
                        "default": "",
                        "default_value": 4096.0,
                        "help": "建议不修改，the max matching window for example join. <=0 means window size is infinite",
                        "label": "最大匹配滑窗",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "INT"
                    },
                    "Slot_min_matching_window": {
                        "default": "",
                        "default_value": 1024.0,
                        "help": "建议不修改，the min matching window for example join ,<=0 means window size is infinite",
                        "label": "最小匹配滑窗",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "INT"
                    },
                    "Slot_negative_sampling_rate": {
                        "default": "",
                        "default_value": 0.0,
                        "help": "建议不修改，负采样比例，当follower求交时遇到无法匹配上的leader的example id，会以此概率生成一个新的样本。",
                        "label": "负采样比例",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "NUMBER"
                    },
                    "Slot_partition_num": {
                        "default": "",
                        "default_value": 4.0,
                        "help": "建议修改，求交后数据分区的数量，建议和raw_data一致",
                        "label": "数据分区的数量",
                        "reference": "workflow.variables.num_partitions",
                        "reference_type": "WORKFLOW",
                        "value_type": "INT"
                    },
                    "Slot_raw_data_iter": {
                        "default": "",
                        "default_value": "TF_RECORD",
                        "help": "建议不修改，choices=['TF_RECORD', 'CSV_DICT']",
                        "label": "raw_data文件类型",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_raw_data_name": {
                        "default": "",
                        "default_value": "",
                        "help": "必须修改，原始数据的发布地址，根据参数内容在portal_publish_dir地址下寻找",
                        "label": "raw_data名字",
                        "reference": "workflow.jobs['raw-data-job-streaming'].name",
                        "reference_type": "JOB_PROPERTY",
                        "value_type": "STRING"
                    },
                    "Slot_role": {
                        "default": "",
                        "default_value": "Leader",
                        "help": "Flapp 通讯时的角色 Leader 或 Follower",
                        "label": "Flapp通讯时角色",
                        "reference": "workflow.variables.role",
                        "reference_type": "WORKFLOW",
                        "value_type": "STRING"
                    },
                    "Slot_start_time": {
                        "default": "",
                        "default_value": 0.0,
                        "help": "建议不修改，使用自这个时间起的数据，仅从文件名筛选所以格式依据文件名（yyyymmdd或timestamp）",
                        "label": "数据起始时间",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "INT"
                    },
                    "Slot_storage_root_path": {
                        "default": "",
                        "default_value": "/data",
                        "help": "联邦学习中任务存储根目录",
                        "label": "存储根目录",
                        "reference": "project.variables.storage_root_path",
                        "reference_type": "PROJECT",
                        "value_type": "STRING"
                    },
                    "Slot_volume_mounts": {
                        "default": "",
                        "default_value": [
                            {
                                "mountPath": "/data",
                                "name": "data"
                            }
                        ],
                        "help": "建议不修改，容器中卷挂载的位置，数组类型",
                        "label": "卷挂载位置",
                        "reference": "system.variables.volume_mounts_list",
                        "reference_type": "SYSTEM",
                        "value_type": "LIST"
                    },
                    "Slot_volumes": {
                        "default": "",
                        "default_value": [
                            {
                                "name": "data",
                                "persistentVolumeClaim": {
                                    "claimName": "pvc-fedlearner-default"
                                }
                            }
                        ],
                        "help": "建议不修改，数组类型，和volume_mounts一一对应",
                        "label": "为Pod提供的卷",
                        "reference": "system.variables.volumes_list",
                        "reference_type": "SYSTEM",
                        "value_type": "LIST"
                    },
                    "Slot_worker_cpu": {
                        "default": "",
                        "default_value": "2000m",
                        "help": "Worker Pod 所分配的CPU资源（request和limit一致）",
                        "label": "Worker的CPU",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_worker_envs": {
                        "default": "",
                        "default_value": [],
                        "help": "数组类型，worker pod额外的环境变量",
                        "label": "Worker额外环境变量",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "LIST"
                    },
                    "Slot_worker_memory": {
                        "default": "",
                        "default_value": "3Gi",
                        "help": "Worker Pod 所分配的内存资源（request和limit一致）",
                        "label": "Worker的内存",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    }
                },
                "variables": []
            },
            "nn-train": {
                "meta_yaml": "{\n  \"apiVersion\": \"fedlearner.k8s.io/v1alpha1\",\n  \"kind\": \"FLApp\",\n  \"metadata\": {\n    \"name\": self.name,\n    \"namespace\": system.variables.namespace,\n    \"annotations\":{\n        \"queue\": \"fedlearner\",\n        \"schedulerName\": \"batch\"\n    },\n    \"labels\": ${Slot_labels}\n  },\n  \"spec\": {\n    \"role\": ${Slot_role},\n    \"cleanPodPolicy\": \"All\",\n    \"peerSpecs\": {\n      \"Leader\" if ${Slot_role}==\"Follower\" else \"Follower\": {\n        \"peerURL\": \"fedlearner-stack-ingress-nginx-controller.default.svc:80\",\n        \"authority\": project.participants[0].egress_host,\n        \"extraHeaders\": {\n          \"x-host\": \"fedlearner-operator.\" + project.participants[0].egress_domain\n        }\n      }\n    },\n    \"flReplicaSpecs\": {\n      \"Master\": {\n        \"template\": {\n          \"spec\": {\n            \"restartPolicy\": \"Never\",\n            \"containers\": [\n              {\n                \"env\": system.basic_envs_list + [\n                  {\n                    \"name\": \"STORAGE_ROOT_PATH\",\n                    \"value\": ${Slot_storage_root_path}\n                  },\n                  {\n                    \"name\": \"ROLE\",\n                    \"value\": ${Slot_role}.lower()\n                  },\n                  {\n                    \"name\": \"APPLICATION_ID\",\n                    \"value\": self.name\n                  },\n                  {\n                    \"name\": \"OUTPUT_BASE_DIR\",\n                    \"value\": ${Slot_storage_root_path} + \"/job_output/\" + self.name\n                  },\n                  {\n                    \"name\": \"EGRESS_URL\",\n                    \"value\": \"fedlearner-stack-ingress-nginx-controller.default.svc:80\"\n                  },\n                  {\n                    \"name\": \"EGRESS_HOST\",\n                    \"value\": project.participants[0].egress_host\n                  },\n                  {\n                    \"name\": \"EGRESS_DOMAIN\",\n                    \"value\": project.participants[0].egress_domain\n                  },\n                  {\n                    \"name\": \"EPOCH_NUM\",\n                    \"value\": str(${Slot_epoch_num})\n                  },\n                  {\n                    \"name\": \"START_DATE\",\n                    \"value\": str(${Slot_start_date})\n                  },\n                  {\n                    \"name\": \"END_DATE\",\n                    \"value\": str(${Slot_end_date})\n                  },\n                  {\n                    \"name\": \"DATA_SOURCE\",\n                    \"value\": ${Slot_data_source}\n                  },\n                  {\n                    \"name\": \"ONLINE_TRAINING\",\n                    \"value\": ${Slot_online_training}\n                  },\n                  {\n                    \"name\": \"SPARSE_ESTIMATOR\",\n                    \"value\": str(${Slot_sparse_estimator})\n                  },\n                  {\n                    \"name\": \"CODE_KEY\",\n                    \"value\": ${Slot_code_key}\n                  },\n                  {\n                    \"name\": \"CODE_TAR\",\n                    \"value\": ${Slot_code_tar}\n                  },\n                  {\n                    \"name\": \"CHECKPOINT_PATH\",\n                    \"value\": ${Slot_checkpoint_path}\n                  },\n                  {\n                    \"name\": \"LOAD_CHECKPOINT_FILENAME\",\n                    \"value\": ${Slot_load_checkpoint_filename}\n                  },\n                  {\n                    \"name\": \"LOAD_CHECKPOINT_FILENAME_WITH_PATH\",\n                    \"value\": ${Slot_load_checkpoint_filename_with_path}\n                  },\n                  {\n                    \"name\": \"LOAD_CHECKPOINT_PATH\",\n                    \"value\":  ${Slot_load_checkpoint_from_job} and ${Slot_storage_root_path} + \"/job_output/\" + ${Slot_load_checkpoint_from_job} + \"/checkpoints\"\n                  },\n                  {\n                    \"name\": \"EXPORT_PATH\",\n                    \"value\": ${Slot_export_path}\n                  }\n                ] + ${Slot_master_envs},\n                \"imagePullPolicy\": \"IfNotPresent\",\n                \"name\": \"tensorflow\",\n                \"volumeMounts\": ${Slot_volume_mounts},\n                \"image\": ${Slot_image},\n                \"ports\": [\n                  {\n                    \"containerPort\": 50051,\n                    \"name\": \"flapp-port\",\n                    \"protocol\": \"TCP\"\n                  }\n                ],\n                \"command\": [\n        \"/app/deploy/scripts/trainer/run_trainer_master.sh\"\n                ],\n                \"args\": [\n                ],\n                \"resources\": {\n                  \"limits\": {\n                    \"cpu\": ${Slot_master_cpu},\n                    \"memory\": ${Slot_master_memory}\n                  },\n                  \"requests\": {\n                    \"cpu\": ${Slot_master_cpu},\n                    \"memory\": ${Slot_master_memory}\n                  }\n                }\n              }\n            ],\n            \"imagePullSecrets\": [\n              {\n                \"name\": \"regcred\"\n              }\n            ],\n            \"volumes\": ${Slot_volumes}\n\n          }\n        },\n        \"pair\": False,\n        \"replicas\": int(${Slot_master_replicas})\n      },\n      \"PS\": {\n        \"template\": {\n          \"spec\": {\n            \"restartPolicy\": \"Never\",\n            \"containers\": [\n              {\n                \"env\": system.basic_envs_list + [\n                  {\n                    \"name\": \"STORAGE_ROOT_PATH\",\n                    \"value\": ${Slot_storage_root_path}\n                  },\n                  {\n                    \"name\": \"EGRESS_URL\",\n                    \"value\": \"fedlearner-stack-ingress-nginx-controller.default.svc:80\"\n                  },\n                  {\n                    \"name\": \"EGRESS_HOST\",\n                    \"value\": project.participants[0].egress_host\n                  },\n                  {\n                    \"name\": \"EGRESS_DOMAIN\",\n                    \"value\": project.participants[0].egress_domain\n                  }\n\n                ] + ${Slot_ps_envs},\n                \"imagePullPolicy\": \"IfNotPresent\",\n                \"name\": \"tensorflow\",\n                \"volumeMounts\": ${Slot_volume_mounts},\n                \"image\": ${Slot_image},\n                \"ports\": [\n                  {\n                    \"containerPort\": 50051,\n                    \"name\": \"flapp-port\",\n                    \"protocol\": \"TCP\"\n                  }\n                ],\n                \"command\": [\n        \"/app/deploy/scripts/trainer/run_trainer_ps.sh\"\n                ],\n                \"args\": [\n                ],\n                \"resources\": {\n                  \"limits\": {\n                    \"cpu\": ${Slot_ps_cpu},\n                    \"memory\": ${Slot_ps_memory}\n                  },\n                  \"requests\": {\n                    \"cpu\": ${Slot_ps_cpu},\n                    \"memory\": ${Slot_ps_memory}\n                  }\n                }\n              }\n            ],\n            \"imagePullSecrets\": [\n              {\n                \"name\": \"regcred\"\n              }\n            ],\n            \"volumes\": ${Slot_volumes}\n          }\n        },\n        \"pair\": False,\n        \"replicas\": int(${Slot_ps_replicas})\n      },\n      \"Worker\": {\n        \"template\": {\n          \"spec\": {\n            \"restartPolicy\": \"Never\",\n            \"containers\": [\n              {\n                \"env\": system.basic_envs_list + [\n                  {\n                    \"name\": \"STORAGE_ROOT_PATH\",\n                    \"value\": ${Slot_storage_root_path}\n                  },\n                  {\n                    \"name\": \"ROLE\",\n                    \"value\": ${Slot_role}.lower()\n                  },\n                  {\n                    \"name\": \"APPLICATION_ID\",\n                    \"value\": self.name\n                  },\n                  {\n                    \"name\": \"OUTPUT_BASE_DIR\",\n                    \"value\": ${Slot_storage_root_path} + \"/job_output/\" + self.name\n                  },\n                  {\n                    \"name\": \"EGRESS_URL\",\n                    \"value\": \"fedlearner-stack-ingress-nginx-controller.default.svc:80\"\n                  },\n                  {\n                    \"name\": \"EGRESS_HOST\",\n                    \"value\": project.participants[0].egress_host\n                  },\n                  {\n                    \"name\": \"EGRESS_DOMAIN\",\n                    \"value\": project.participants[0].egress_domain\n                  },\n                  {\n                    \"name\": \"MODE\",\n                    \"value\": ${Slot_mode}\n                  },\n                  {\n                    \"name\": \"VERBOSITY\",\n                    \"value\": str(${Slot_verbosity})\n                  },\n                  {\n                    \"name\": \"CODE_KEY\",\n                    \"value\": ${Slot_code_key}\n                  },\n                  {\n                    \"name\": \"CODE_TAR\",\n                    \"value\": ${Slot_code_tar}\n                  },\n                  {\n                    \"name\": \"SAVE_CHECKPOINT_STEPS\",\n                    \"value\": str(${Slot_save_checkpoint_steps})\n                  },\n                  {\n                    \"name\": \"SAVE_CHECKPOINT_SECS\",\n                    \"value\": str(${Slot_save_checkpoint_secs})\n                  },\n                  {\n                    \"name\": \"SPARSE_ESTIMATOR\",\n                    \"value\": str(${Slot_sparse_estimator})\n                  },\n                  {\n                    \"name\": \"SUMMARY_SAVE_STEPS\",\n                    \"value\": str(${Slot_summary_save_steps})\n                  }\n                ] + ${Slot_worker_envs},\n                \"imagePullPolicy\": \"IfNotPresent\",\n                \"name\": \"tensorflow\",\n                \"volumeMounts\": ${Slot_volume_mounts},\n                \"image\": ${Slot_image},\n                \"ports\": [\n                  {\n                    \"containerPort\": 50051,\n                    \"name\": \"flapp-port\",\n                    \"protocol\": \"TCP\"\n                  }\n                ],\n                \"command\": [\n                  \"/app/deploy/scripts/wait4pair_wrapper.sh\"\n                ],\n                \"args\": [\n                  \"/app/deploy/scripts/trainer/run_trainer_worker.sh\"\n                ],\n                \"resources\": {\n                  \"limits\": {\n                    \"cpu\": ${Slot_worker_cpu},\n                    \"memory\": ${Slot_worker_memory}\n                  },\n                  \"requests\": {\n                    \"cpu\": ${Slot_worker_cpu},\n                    \"memory\": ${Slot_worker_memory}\n                  }\n                }\n              }\n            ],\n            \"imagePullSecrets\": [\n              {\n                \"name\": \"regcred\"\n              }\n            ],\n            \"volumes\": ${Slot_volumes}\n          }\n        },\n        \"pair\": True,\n        \"replicas\": int(${Slot_worker_replicas})\n      }\n    }\n  }\n}\n",
                "slots": {
                    "Slot_checkpoint_path": {
                        "default": "",
                        "default_value": "",
                        "help": "不建议修改，checkpoint输出路径，建议为空，会默认使用{storage_root_path}/job_output/{job_name}/checkpoints，强烈建议保持空值",
                        "label": "CHECKPOINT_PATH",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_code_key": {
                        "default": "",
                        "default_value": "",
                        "help": "代码tar包地址，如果为空则使用code tar",
                        "label": "模型代码路径",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_code_tar": {
                        "default": "",
                        "default_value": "",
                        "help": "代码包，variable中请使用代码类型",
                        "label": "代码",
                        "reference": "self.variables.code_tar",
                        "reference_type": "SELF",
                        "value_type": "STRING"
                    },
                    "Slot_data_source": {
                        "default": "",
                        "default_value": "",
                        "help": "必须修改，求交任务的名字",
                        "label": "数据源",
                        "reference": "workflow.jobs['data-join-job'].name",
                        "reference_type": "JOB_PROPERTY",
                        "value_type": "STRING"
                    },
                    "Slot_end_date": {
                        "default": "",
                        "default_value": null,
                        "help": "training data end date",
                        "label": "结束时间",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "INT"
                    },
                    "Slot_epoch_num": {
                        "default": "",
                        "default_value": 1.0,
                        "help": "number of epoch for training, not support in online training",
                        "label": "epoch数量",
                        "reference": "self.variables.epoch_num",
                        "reference_type": "SELF",
                        "value_type": "INT"
                    },
                    "Slot_export_path": {
                        "default": "",
                        "default_value": "",
                        "help": "使用默认空值，将把models保存到$OUTPUT_BASE_DIR/exported_models 路径下。",
                        "label": "EXPORT_PATH",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_image": {
                        "default": "",
                        "default_value": "artifact.bytedance.com/fedlearner/fedlearner:50a6945",
                        "help": "建议不修改，指定Pod中运行的容器镜像地址，修改此项可能导致本基本模板不适用",
                        "label": "容器镜像",
                        "reference": "workflow.variables.image",
                        "reference_type": "WORKFLOW",
                        "value_type": "STRING"
                    },
                    "Slot_labels": {
                        "default": "",
                        "default_value": {},
                        "help": "建议不修改，格式： {}",
                        "label": "FLAPP额外元信息",
                        "reference": "system.variables.labels",
                        "reference_type": "SYSTEM",
                        "value_type": "OBJECT"
                    },
                    "Slot_load_checkpoint_filename": {
                        "default": "",
                        "default_value": "",
                        "help": "加载checkpoint_path下的相对路径的checkpoint, 默认会加载checkpoint_path下的latest checkpoint",
                        "label": "LOAD_CHECKPOINT_FILENAME",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_load_checkpoint_filename_with_path": {
                        "default": "",
                        "default_value": "",
                        "help": "加载绝对路径下的checkpoint，需要细致到文件名",
                        "label": "从绝对路径加载checkpoint",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_load_checkpoint_from_job": {
                        "default": "",
                        "default_value": "",
                        "help": "指定任务名job_output下的latest checkpoint",
                        "label": "以任务名加载checkpoint",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_master_cpu": {
                        "default": "",
                        "default_value": "2000m",
                        "help": "Master Pod 所分配的CPU资源（request和limit一致）",
                        "label": "Master的CPU",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_master_envs": {
                        "default": "",
                        "default_value": [],
                        "help": "数组类型，master pod额外的环境变量",
                        "label": "Master额外环境变量",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "LIST"
                    },
                    "Slot_master_memory": {
                        "default": "",
                        "default_value": "3Gi",
                        "help": "Master Pod 所分配的内存资源（request和limit一致）",
                        "label": "Master的内存",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_master_replicas": {
                        "default": "",
                        "default_value": 1.0,
                        "help": "同时运行的完全相同的Master Pods数量",
                        "label": "Master的Pod个数",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "INT"
                    },
                    "Slot_mode": {
                        "default": "",
                        "default_value": "train",
                        "help": "choices:['train','eval']  训练还是验证",
                        "label": "模式",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_online_training": {
                        "default": "",
                        "default_value": "",
                        "help": "['','--online_training'] 否 是,the train master run for online training",
                        "label": "是否在线训练",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_ps_cpu": {
                        "default": "",
                        "default_value": "2000m",
                        "help": "Master Pod 所分配的CPU资源（request和limit一致）",
                        "label": "PS的CPU",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_ps_envs": {
                        "default": "",
                        "default_value": [],
                        "help": "数组类型，ps pod额外的环境变量",
                        "label": "PS额外环境变量",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "LIST"
                    },
                    "Slot_ps_memory": {
                        "default": "",
                        "default_value": "3Gi",
                        "help": "Master Pod 所分配的内存资源（request和limit一致）",
                        "label": "PS的内存",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_ps_replicas": {
                        "default": "",
                        "default_value": 1.0,
                        "help": "同时运行的完全相同的PS Pods数量",
                        "label": "PS的Pod个数",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "INT"
                    },
                    "Slot_role": {
                        "default": "",
                        "default_value": "Leader",
                        "help": "Flapp 通讯时的角色 Leader 或 Follower",
                        "label": "Flapp通讯时角色",
                        "reference": "workflow.variables.role",
                        "reference_type": "WORKFLOW",
                        "value_type": "STRING"
                    },
                    "Slot_save_checkpoint_secs": {
                        "default": "",
                        "default_value": null,
                        "help": "int,Number of secs between checkpoints.",
                        "label": "SAVE_CHECKPOINT_SECS",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "INT"
                    },
                    "Slot_save_checkpoint_steps": {
                        "default": "",
                        "default_value": 1000.0,
                        "help": "int, Number of steps between checkpoints.",
                        "label": "SAVE_CHECKPOINT_STEPS",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "INT"
                    },
                    "Slot_sparse_estimator": {
                        "default": "",
                        "default_value": false,
                        "help": "bool,default False  Whether using sparse estimator.",
                        "label": "SPARSE_ESTIMATOR",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "BOOL"
                    },
                    "Slot_start_date": {
                        "default": "",
                        "default_value": null,
                        "help": "training data start date",
                        "label": "开始时间",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "INT"
                    },
                    "Slot_storage_root_path": {
                        "default": "",
                        "default_value": "/data",
                        "help": "联邦学习中任务存储根目录",
                        "label": "存储根目录",
                        "reference": "project.variables.storage_root_path",
                        "reference_type": "PROJECT",
                        "value_type": "STRING"
                    },
                    "Slot_suffle_data_block": {
                        "default": "",
                        "default_value": "",
                        "help": "['','--shuffle_data_block'] 否 是,shuffle the data block or not",
                        "label": "是否shuffle数据块",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_summary_save_steps": {
                        "default": "",
                        "default_value": null,
                        "help": "int, Number of steps to save summary files.",
                        "label": "SUMMARY_SAVE_STEPS",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "INT"
                    },
                    "Slot_verbosity": {
                        "default": "",
                        "default_value": 1.0,
                        "help": "int, Logging level",
                        "label": "日志等级",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "INT"
                    },
                    "Slot_volume_mounts": {
                        "default": "",
                        "default_value": [
                            {
                                "mountPath": "/data",
                                "name": "data"
                            }
                        ],
                        "help": "建议不修改，容器中卷挂载的位置，数组类型",
                        "label": "卷挂载位置",
                        "reference": "system.variables.volume_mounts_list",
                        "reference_type": "SYSTEM",
                        "value_type": "LIST"
                    },
                    "Slot_volumes": {
                        "default": "",
                        "default_value": [
                            {
                                "name": "data",
                                "persistentVolumeClaim": {
                                    "claimName": "pvc-fedlearner-default"
                                }
                            }
                        ],
                        "help": "建议不修改，数组类型，和volume_mounts一一对应",
                        "label": "为Pod提供的卷",
                        "reference": "system.variables.volumes_list",
                        "reference_type": "SYSTEM",
                        "value_type": "LIST"
                    },
                    "Slot_worker_cpu": {
                        "default": "",
                        "default_value": "2000m",
                        "help": "Worker Pod 所分配的CPU资源（request和limit一致）",
                        "label": "Worker的CPU",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_worker_envs": {
                        "default": "",
                        "default_value": [],
                        "help": "数组类型，worker pod额外的环境变量",
                        "label": "Worker额外环境变量",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "LIST"
                    },
                    "Slot_worker_memory": {
                        "default": "",
                        "default_value": "3Gi",
                        "help": "Worker Pod 所分配的内存资源（request和limit一致）",
                        "label": "Worker的内存",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_worker_replicas": {
                        "default": "",
                        "default_value": 1.0,
                        "help": "同时运行的完全相同的Worker Pods数量",
                        "label": "Worker的Pod个数",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "INT"
                    }
                },
                "variables": []
            },
            "psi-data-join-job": {
                "meta_yaml": "{\n    \"apiVersion\": \"fedlearner.k8s.io/v1alpha1\",\n    \"kind\": \"FLApp\",\n    \"metadata\": {\n    \"name\": self.name,\n    \"namespace\": system.variables.namespace,\n      \"annotations\":{\n          \"queue\": \"fedlearner\",\n          \"schedulerName\": \"batch\"\n      },\n    \"labels\": ${Slot_labels}\n    },\n    \"spec\": {\n        \"role\": ${Slot_role},\n        \"cleanPodPolicy\": \"All\",\n        \"peerSpecs\": {\n        \"Leader\" if ${Slot_role}==\"Follower\" else \"Follower\": {\n            \"peerURL\": \"fedlearner-stack-ingress-nginx-controller.default.svc:80\",\n            \"authority\": project.participants[0].egress_host,\n            \"extraHeaders\": {\n            \"x-host\": \"fedlearner-operator.\" + project.participants[0].egress_domain\n            }\n        }\n        },\n        \"flReplicaSpecs\": {\n            \"Master\": {\n                \"template\": {\n                    \"spec\": {\n                        \"restartPolicy\": \"Never\",\n                        \"containers\": [\n                            {\n                                \"env\": system.basic_envs_list + [\n                                    {\n                                        \"name\": \"STORAGE_ROOT_PATH\",\n                                        \"value\": ${Slot_storage_root_path}\n                                    },\n                                    {\n                                        \"name\": \"ROLE\",\n                                        \"value\": ${Slot_role}.lower()\n                                    },\n                                    {\n                                        \"name\": \"APPLICATION_ID\",\n                                        \"value\": self.name\n                                    },\n                                    {\n                                        \"name\": \"OUTPUT_BASE_DIR\",\n                                        \"value\": ${Slot_storage_root_path} + \"/data_source/\" + self.name\n                                    },\n                                    {\n                                        \"name\": \"EGRESS_URL\",\n                                        \"value\": \"fedlearner-stack-ingress-nginx-controller.default.svc:80\"\n                                    },\n                                    {\n                                        \"name\": \"EGRESS_HOST\",\n                                        \"value\": project.participants[0].egress_host\n                                    },\n                                    {\n                                        \"name\": \"EGRESS_DOMAIN\",\n                                        \"value\": project.participants[0].egress_domain\n                                    },\n                                    {\n                                        \"name\": \"PARTITION_NUM\",\n                                        \"value\": str(${Slot_partition_num})\n                                    },\n                                    {\n                                        \"name\": \"START_TIME\",\n                                        \"value\": str(${Slot_start_time})\n                                    },\n                                    {\n                                        \"name\": \"END_TIME\",\n                                        \"value\": str(${Slot_end_time})\n                                    },\n                                    {\n                                        \"name\": \"RAW_DATA_SUB_DIR\",\n                                        \"value\": \"portal_publish_dir/\" + ${Slot_raw_data_name}\n                                    },\n                                    {\n                                        # not work, remove it after prepare_launch_data_join_cli been removed\n                                        \"name\": \"NEGATIVE_SAMPLING_RATE\",\n                                        \"value\": str(${Slot_negative_sampling_rate})\n                                    }\n                                ] + ${Slot_master_envs},\n                                \"imagePullPolicy\": \"IfNotPresent\",\n                                \"name\": \"tensorflow\",\n                                \"volumeMounts\": ${Slot_volume_mounts},\n                                \"image\": ${Slot_image},\n                                \"ports\": [\n                                    {\n                                        \"containerPort\": 50051,\n                                        \"name\": \"flapp-port\",\n                                        \"protocol\": \"TCP\"\n                                    }\n                                ],\n                                \"command\": [\n                                    \"/app/deploy/scripts/wait4pair_wrapper.sh\"\n                                ],\n                                \"args\": [\n                                    \"/app/deploy/scripts/rsa_psi/run_psi_data_join_master.sh\"\n                                ],\n                                \"resources\": {\n                                      \"limits\": {\n                                        \"cpu\": ${Slot_master_cpu},\n                                        \"memory\": ${Slot_master_memory}\n                                      },\n                                      \"requests\": {\n                                        \"cpu\": ${Slot_master_cpu},\n                                        \"memory\": ${Slot_master_memory}\n                                      }\n                                }\n                            }\n                        ],\n                        \"imagePullSecrets\": [\n                            {\n                                \"name\": \"regcred\"\n                            }\n                        ],\n                        \"volumes\": ${Slot_volumes}\n                    }\n                },\n                \"pair\": True,\n                \"replicas\": 1\n            },\n            \"Worker\": {\n                \"template\": {\n                    \"spec\": {\n                        \"restartPolicy\": \"Never\",\n                        \"containers\": [\n                            {\n                                \"env\": system.basic_envs_list + [\n                                    {\n                                        \"name\": \"STORAGE_ROOT_PATH\",\n                                        \"value\": ${Slot_storage_root_path}\n                                    },\n                                    {\n                                        \"name\": \"EGRESS_URL\",\n                                        \"value\": \"fedlearner-stack-ingress-nginx-controller.default.svc:80\"\n                                    },\n                                    {\n                                        \"name\": \"EGRESS_HOST\",\n                                        \"value\": project.participants[0].egress_host\n                                    },\n                                    {\n                                        \"name\": \"EGRESS_DOMAIN\",\n                                        \"value\": project.participants[0].egress_domain\n                                    },\n                                    {\n                                        \"name\": \"ROLE\",\n                                        \"value\": ${Slot_role}.lower()\n                                    },\n                                    {\n                                        \"name\": \"APPLICATION_ID\",\n                                        \"value\": self.name\n                                    },\n                                    {\n                                        \"name\": \"BATCH_MODE\",\n                                        \"value\": ${Slot_batch_mode}\n                                    },\n                                    {\n                                        \"name\": \"OUTPUT_BASE_DIR\",\n                                        \"value\": ${Slot_storage_root_path} + \"/data_source/\" + self.name\n                                    },\n                                    {\n                                        \"name\": \"PARTITION_NUM\",\n                                        \"value\": str(${Slot_partition_num})\n                                    },\n                                    {\n                                        \"name\": \"RAW_DATA_SUB_DIR\",\n                                        \"value\": \"portal_publish_dir/\" + ${Slot_raw_data_name}\n                                    },\n                                    {\n                                        \"name\": \"RSA_KEY_PEM\",\n                                        \"value\": ${Slot_rsa_key_pem}\n                                    },\n                                    {\n                                        \"name\": \"RSA_KEY_PATH\",\n                                        \"value\": ${Slot_rsa_key_path}\n                                    },\n                                    {\n                                        \"name\": \"RSA_PRIVATE_KEY_PATH\",\n                                        \"value\": ${Slot_rsa_private_key_path}\n                                    },\n                                    {\n                                        \"name\": \"KMS_KEY_NAME\",\n                                        \"value\": ${Slot_kms_key_name}\n                                    },\n                                    {\n                                        \"name\": \"KMS_CLIENT\",\n                                        \"value\": ${Slot_kms_client}\n                                    },\n                                    {\n                                        \"name\": \"PSI_RAW_DATA_ITER\",\n                                        \"value\": ${Slot_psi_raw_data_iter}\n                                    },\n                                    {\n                                        \"name\": \"DATA_BLOCK_BUILDER\",\n                                        \"value\": ${Slot_data_block_builder}\n                                    },\n                                    {\n                                        \"name\": \"PSI_OUTPUT_BUILDER\",\n                                        \"value\": ${Slot_psi_output_builder}\n                                    },\n                                    {\n                                        \"name\": \"DATA_BLOCK_DUMP_INTERVAL\",\n                                        \"value\": str(${Slot_data_block_dump_interval})\n                                    },\n                                    {\n                                        \"name\": \"DATA_BLOCK_DUMP_THRESHOLD\",\n                                        \"value\": str(${Slot_data_block_dump_threshold})\n                                    },\n                                    {\n                                        \"name\": \"EXAMPLE_ID_DUMP_INTERVAL\",\n                                        \"value\": str(${Slot_example_id_dump_interval})\n                                    },\n                                    {\n                                        \"name\": \"EXAMPLE_ID_DUMP_THRESHOLD\",\n                                        \"value\": str(${Slot_example_id_dump_threshold})\n                                    },\n                                    {\n                                        \"name\": \"EXAMPLE_JOINER\",\n                                        \"value\": \"SORT_RUN_JOINER\"\n                                    },\n                                    {\n                                        \"name\": \"PSI_READ_AHEAD_SIZE\",\n                                        \"value\": str(${Slot_psi_read_ahead_size})\n                                    },\n                                    {\n                                        \"name\": \"SORT_RUN_MERGER_READ_AHEAD_BUFFER\",\n                                        \"value\": str(${Slot_run_merger_read_ahead_buffer})\n                                    },\n                                    {\n                                        \"name\": \"NEGATIVE_SAMPLING_RATE\",\n                                        \"value\": str(${Slot_negative_sampling_rate})\n                                    },\n                                    {\n                                        \"name\": \"ENABLE_NEGATIVE_EXAMPLE_GENERATOR\",\n                                        \"value\": str(${Slot_enable_negative_example_generator})\n                                    }\n                                ] + ${Slot_worker_envs},\n                                \"imagePullPolicy\": \"IfNotPresent\",\n                                \"name\": \"tensorflow\",\n                                \"volumeMounts\": ${Slot_volume_mounts},\n                                \"image\": ${Slot_image},\n                                \"ports\": [\n                                    {\n                                        \"containerPort\": 50051,\n                                        \"name\": \"flapp-port\",\n                                        \"protocol\": \"TCP\"\n                                    }\n                                ],\n                                \"command\": [\n                                    \"/app/deploy/scripts/wait4pair_wrapper.sh\"\n                                ],\n                                \"args\": [\n                                    \"/app/deploy/scripts/rsa_psi/run_psi_data_join_worker.sh\"\n                                ],\n                                \"resources\": {\n                                    \"limits\": {\n                                        \"cpu\": ${Slot_worker_cpu},\n                                        \"memory\": ${Slot_worker_memory}\n                                    },\n                                    \"requests\": {\n                                        \"cpu\": ${Slot_worker_cpu},\n                                        \"memory\": ${Slot_worker_memory}\n                                    }\n                                }\n                            }\n                        ],\n                        \"imagePullSecrets\": [\n                            {\n                                \"name\": \"regcred\"\n                            }\n                        ],\n                        \"volumes\": ${Slot_volumes}\n                    }\n                },\n                \"pair\": True,\n                \"replicas\": int(${Slot_partition_num})\n            }\n        }\n    }\n}\n",
                "slots": {
                    "Slot_batch_mode": {
                        "default": "",
                        "default_value": "--batch_mode",
                        "help": "如果为空则为常驻求交",
                        "label": "是否为批处理模式",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_data_block_builder": {
                        "default": "",
                        "default_value": "TF_RECORD",
                        "help": "建议不修改，choices=['TF_RECORD', 'CSV_DICT']",
                        "label": "data block output数据类型",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_data_block_dump_interval": {
                        "default": "",
                        "default_value": -1.0,
                        "help": "建议不修改，最多每隔多少时间（实际时间，非样本时间）就dump一次data block，小于0则无此限制",
                        "label": "数据dump时间间隔",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "INT"
                    },
                    "Slot_data_block_dump_threshold": {
                        "default": "",
                        "default_value": 4096.0,
                        "help": "建议不修改，最多多少个样本就dump为一个data block，小于等于0则无此限制",
                        "label": "数据dump临界点",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "INT"
                    },
                    "Slot_enable_negative_example_generator": {
                        "default": "",
                        "default_value": false,
                        "help": "建议不修改，是否开启负采样，当follower求交时遇到无法匹配上的leader的example id，会以negative_sampling_rate为概率生成一个新的样本。",
                        "label": "负采样比例",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "BOOL"
                    },
                    "Slot_end_time": {
                        "default": "",
                        "default_value": 999999999999.0,
                        "help": "建议不修改，使用自这个时间以前的数据，仅从文件名筛选所以格式依据文件名（yyyymmdd或timestamp）",
                        "label": "数据末尾时间",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "INT"
                    },
                    "Slot_example_id_dump_interval": {
                        "default": "",
                        "default_value": -1.0,
                        "help": "建议不修改，最多每隔多少时间（实际时间，非样本时间）就dump一次example id，小于0则无此限制",
                        "label": "数据id dump时间间隔",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "INT"
                    },
                    "Slot_example_id_dump_threshold": {
                        "default": "",
                        "default_value": 4096.0,
                        "help": "建议不修改，最多每隔多少时间（实际时间，非样本时间）就dump一次example id，小于0则无此限制",
                        "label": "数据id dump临界点",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "INT"
                    },
                    "Slot_image": {
                        "default": "",
                        "default_value": "artifact.bytedance.com/fedlearner/fedlearner:50a6945",
                        "help": "建议不修改，指定Pod中运行的容器镜像地址，修改此项可能导致本基本模版不适用",
                        "label": "容器镜像",
                        "reference": "workflow.variables.image",
                        "reference_type": "WORKFLOW",
                        "value_type": "STRING"
                    },
                    "Slot_kms_client": {
                        "default": "",
                        "default_value": "data.aml.fl",
                        "help": "kms client",
                        "label": "kms client",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_kms_key_name": {
                        "default": "",
                        "default_value": "",
                        "help": "kms中的密钥名称，站内镜像需使用KMS",
                        "label": "密钥名称",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_labels": {
                        "default": "",
                        "default_value": {},
                        "help": "建议不修改，格式： {}",
                        "label": "FLAPP额外元信息",
                        "reference": "system.variables.labels",
                        "reference_type": "SYSTEM",
                        "value_type": "OBJECT"
                    },
                    "Slot_master_cpu": {
                        "default": "",
                        "default_value": "2000m",
                        "help": "Master Pod 所分配的CPU资源（request和limit一致）",
                        "label": "Master的CPU",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_master_envs": {
                        "default": "",
                        "default_value": [],
                        "help": "数组类型，master pod额外的环境变量",
                        "label": "Master额外环境变量",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "LIST"
                    },
                    "Slot_master_memory": {
                        "default": "",
                        "default_value": "3Gi",
                        "help": "Master Pod 所分配的内存资源（request和limit一致）",
                        "label": "Master的内存",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_negative_sampling_rate": {
                        "default": "",
                        "default_value": 0.0,
                        "help": "建议不修改，负采样比例，当follower求交时遇到无法匹配上的leader的example id，会以此概率生成一个新的样本。",
                        "label": "负采样比例",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "NUMBER"
                    },
                    "Slot_partition_num": {
                        "default": "",
                        "default_value": 4.0,
                        "help": "建议修改，求交后数据分区的数量，建议和raw_data一致",
                        "label": "数据分区的数量",
                        "reference": "workflow.variables.num_partitions",
                        "reference_type": "WORKFLOW",
                        "value_type": "INT"
                    },
                    "Slot_psi_output_builder": {
                        "default": "",
                        "default_value": "TF_RECORD",
                        "help": "建议不修改，choices=['TF_RECORD', 'CSV_DICT']",
                        "label": "PSI output数据类型",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_psi_raw_data_iter": {
                        "default": "",
                        "default_value": "TF_RECORD",
                        "help": "建议不修改，choices=['TF_RECORD', 'CSV_DICT']",
                        "label": "raw data数据类型",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_psi_read_ahead_size": {
                        "default": "",
                        "default_value": null,
                        "help": "建议不填, the read ahead size for raw data",
                        "label": "psi_read_ahead_size",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "INT"
                    },
                    "Slot_raw_data_name": {
                        "default": "",
                        "default_value": "",
                        "help": "必须修改，原始数据的发布地址，根据参数内容在portal_publish_dir地址下寻找",
                        "label": "raw_data名字",
                        "reference": "workflow.jobs['raw-data-job-psi'].name",
                        "reference_type": "JOB_PROPERTY",
                        "value_type": "STRING"
                    },
                    "Slot_role": {
                        "default": "",
                        "default_value": "Leader",
                        "help": "Flapp 通讯时的角色 Leader 或 Follower",
                        "label": "Flapp通讯时角色",
                        "reference": "workflow.variables.role",
                        "reference_type": "WORKFLOW",
                        "value_type": "STRING"
                    },
                    "Slot_rsa_key_path": {
                        "default": "",
                        "default_value": "",
                        "help": "RSA公钥或私钥的地址，在无RSA_KEY_PEM时必填",
                        "label": "RSA钥匙地址",
                        "reference": "self.variables.rsa_key_path",
                        "reference_type": "SELF",
                        "value_type": "STRING"
                    },
                    "Slot_rsa_key_pem": {
                        "default": "",
                        "default_value": "",
                        "help": "RSA公钥，follower需提供",
                        "label": "RSA公钥",
                        "reference": "self.variables.rsa_key_pem",
                        "reference_type": "SELF",
                        "value_type": "STRING"
                    },
                    "Slot_rsa_private_key_path": {
                        "default": "",
                        "default_value": "",
                        "help": "RSA私钥的地址, leader必填",
                        "label": "RSA私钥地址",
                        "reference": "self.variables.rsa_private_key_path",
                        "reference_type": "SELF",
                        "value_type": "STRING"
                    },
                    "Slot_run_merger_read_ahead_buffer": {
                        "default": "",
                        "default_value": null,
                        "help": "建议不填, sort run merger read ahead buffer",
                        "label": "run_merger_read_ahead_buffer",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "INT"
                    },
                    "Slot_start_time": {
                        "default": "",
                        "default_value": 0.0,
                        "help": "建议不修改，使用自这个时间起的数据，仅从文件名筛选所以格式依据文件名（yyyymmdd或timestamp）",
                        "label": "数据起始时间",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "INT"
                    },
                    "Slot_storage_root_path": {
                        "default": "",
                        "default_value": "/data",
                        "help": "联邦学习中任务存储根目录",
                        "label": "存储根目录",
                        "reference": "project.variables.storage_root_path",
                        "reference_type": "PROJECT",
                        "value_type": "STRING"
                    },
                    "Slot_volume_mounts": {
                        "default": "",
                        "default_value": [
                            {
                                "mountPath": "/data",
                                "name": "data"
                            }
                        ],
                        "help": "建议不修改，容器中卷挂载的位置，数组类型",
                        "label": "卷挂载位置",
                        "reference": "system.variables.volume_mounts_list",
                        "reference_type": "SYSTEM",
                        "value_type": "LIST"
                    },
                    "Slot_volumes": {
                        "default": "",
                        "default_value": [
                            {
                                "name": "data",
                                "persistentVolumeClaim": {
                                    "claimName": "pvc-fedlearner-default"
                                }
                            }
                        ],
                        "help": "建议不修改，数组类型，和volume_mounts一一对应",
                        "label": "为Pod提供的卷",
                        "reference": "system.variables.volumes_list",
                        "reference_type": "SYSTEM",
                        "value_type": "LIST"
                    },
                    "Slot_worker_cpu": {
                        "default": "",
                        "default_value": "2000m",
                        "help": "Worker Pod 所分配的CPU资源（request和limit一致）",
                        "label": "Worker的CPU",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_worker_envs": {
                        "default": "",
                        "default_value": [],
                        "help": "数组类型，worker pod额外的环境变量",
                        "label": "Worker额外环境变量",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "LIST"
                    },
                    "Slot_worker_memory": {
                        "default": "",
                        "default_value": "3Gi",
                        "help": "Worker Pod 所分配的内存资源（request和limit一致）",
                        "label": "Worker的内存",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    }
                },
                "variables": []
            },
            "raw-data-job-psi": {
                "meta_yaml": "{\n  \"apiVersion\": \"fedlearner.k8s.io/v1alpha1\",\n  \"kind\": \"FLApp\",\n  \"metadata\": {\n    \"name\": self.name,\n    \"namespace\": system.variables.namespace,\n    \"annotations\":{\n        \"queue\": \"fedlearner\",\n        \"schedulerName\": \"batch\"\n    },\n    \"labels\": ${Slot_labels}\n  },\n  \"spec\": {\n    \"role\": \"Follower\",\n    \"peerSpecs\": {\n      \"Leader\": {\n        \"peerURL\": \"\",\n        \"authority\": \"\"\n      }\n    },\n    \"flReplicaSpecs\": {\n      \"Master\": {\n        \"template\": {\n          \"spec\": {\n            \"restartPolicy\": \"Never\",\n            \"containers\": [\n              {\n                \"env\": system.basic_envs_list + [\n                  {\n                    \"name\": \"STORAGE_ROOT_PATH\",\n                    \"value\": ${Slot_storage_root_path}\n                  },\n                    {\n                    \"name\": \"EGRESS_URL\",\n                    \"value\": \"fedlearner-stack-ingress-nginx-controller.default.svc:80\"\n                  },\n                  {\n                    \"name\": \"EGRESS_HOST\",\n                    \"value\": project.participants[0].egress_host\n                  },\n                  {\n                    \"name\": \"EGRESS_DOMAIN\",\n                    \"value\": project.participants[0].egress_domain\n                  },\n                  {\n                    \"name\": \"APPLICATION_ID\",\n                    \"value\": self.name\n                  },\n                  {\n                    \"name\": \"DATA_PORTAL_NAME\",\n                    \"value\": self.name\n                  },\n                    {\n                    \"name\": \"DATA_PORTAL_TYPE\",\n                    \"value\": ${Slot_data_portal_type}\n                  },\n                  {\n                    \"name\": \"OUTPUT_PARTITION_NUM\",\n                    \"value\": str(${Slot_output_partition_num})\n                  },\n                  {\n                    \"name\": \"INPUT_BASE_DIR\",\n                    \"value\": ${Slot_input_base_dir}\n                  },\n                  {\n                    \"name\": \"OUTPUT_BASE_DIR\",\n                    \"value\": ${Slot_storage_root_path} + \"/raw_data/\" + self.name\n                  },\n                  {\n                    \"name\": \"RAW_DATA_PUBLISH_DIR\",\n                    \"value\": \"portal_publish_dir/\" + self.name\n                  },\n                  {\n                    \"name\": \"FILE_WILDCARD\",\n                    \"value\": ${Slot_file_wildcard}\n                  },\n                  {\n                    \"name\": \"LONG_RUNNING\",\n                    \"value\": ${Slot_long_running}\n                  },\n                  {\n                    \"name\": \"CHECK_SUCCESS_TAG\",\n                    \"value\": ${Slot_check_success_tag}\n                  },\n                  {\n                    \"name\": \"FILES_PER_JOB_LIMIT\",\n                    \"value\": str(${Slot_files_per_job_limit})\n                  },\n                  {\n                    \"name\": \"SINGLE_SUBFOLDER\",\n                    \"value\": ${Slot_single_subfolder}\n                  }\n\n                ] + ${Slot_master_envs},\n                \"imagePullPolicy\": \"IfNotPresent\",\n                \"name\": \"tensorflow\",\n                \"volumeMounts\": ${Slot_volume_mounts},\n                \"image\": ${Slot_image},\n                \"ports\": [\n                  {\n                    \"containerPort\": 50051,\n                    \"name\": \"flapp-port\",\n                    \"protocol\": \"TCP\"\n                  }\n                ],\n                \"command\": [\n                  \"/app/deploy/scripts/data_portal/run_data_portal_master.sh\"\n                ],\n                \"args\": [\n                ],\n                \"resources\": {\n                  \"limits\": {\n                    \"cpu\": ${Slot_master_cpu},\n                    \"memory\": ${Slot_master_memory}\n                  },\n                  \"requests\": {\n                    \"cpu\": ${Slot_master_cpu},\n                    \"memory\": ${Slot_master_memory}\n                  }\n                }\n              }\n            ],\n            \"imagePullSecrets\": [\n              {\n                \"name\": \"regcred\"\n              }\n            ],\n            \"volumes\": ${Slot_volumes}\n          }\n        },\n        \"pair\": False,\n        \"replicas\": 1\n      },\n      \"Worker\": {\n        \"template\": {\n          \"spec\": {\n            \"restartPolicy\": \"Never\",\n            \"containers\": [\n              {\n                \"env\": system.basic_envs_list + [\n                  {\n                    \"name\": \"STORAGE_ROOT_PATH\",\n                    \"value\": ${Slot_storage_root_path}\n                  },\n                  {\n                    \"name\": \"APPLICATION_ID\",\n                    \"value\": self.name\n                  },\n                  {\n                    \"name\": \"OUTPUT_BASE_DIR\",\n                    \"value\": ${Slot_storage_root_path} + \"/data_source/\" + self.name\n                  },\n                  {\n                    \"name\": \"EGRESS_URL\",\n                    \"value\": \"fedlearner-stack-ingress-nginx-controller.default.svc:80\"\n                  },\n                  {\n                    \"name\": \"EGRESS_HOST\",\n                    \"value\": project.participants[0].egress_host\n                  },\n                  {\n                    \"name\": \"EGRESS_DOMAIN\",\n                    \"value\": project.participants[0].egress_domain\n                  },\n\n                  {\n                    \"name\": \"BATCH_SIZE\",\n                    \"value\": str(${Slot_batch_size})\n                  },\n                  {\n                    \"name\": \"INPUT_DATA_FORMAT\",\n                    \"value\": ${Slot_input_data_format}\n                  },\n                  {\n                    \"name\": \"COMPRESSED_TYPE\",\n                    \"value\": ${Slot_compressed_type}\n                  },\n                  {\n                    \"name\": \"OUTPUT_DATA_FORMAT\",\n                    \"value\": ${Slot_output_data_format}\n                  },\n                  {\n                    \"name\": \"BUILDER_COMPRESSED_TYPE\",\n                    \"value\": ${Slot_builder_compressed_type}\n                  },\n                  {\n                    \"name\": \"MEMORY_LIMIT_RATIO\",\n                    \"value\": str(${Slot_memory_limit_ratio})\n                  },\n                  {\n                    \"name\": \"OPTIONAL_FIELDS\",\n                    \"value\": ${Slot_optional_fields}\n                  }\n\n\n                ] + ${Slot_worker_envs},\n                \"imagePullPolicy\": \"IfNotPresent\",\n                \"name\": \"tensorflow\",\n                \"volumeMounts\": ${Slot_volume_mounts},\n                \"image\": ${Slot_image},\n                \"ports\": [\n                  {\n                    \"containerPort\": 50051,\n                    \"name\": \"flapp-port\",\n                    \"protocol\": \"TCP\"\n                  }\n                ],\n                \"command\": [\n                  \"/app/deploy/scripts/data_portal/run_data_portal_worker.sh\"\n                ],\n                \"args\": [\n                ],\n                \"resources\": {\n                  \"limits\": {\n                    \"cpu\": ${Slot_worker_cpu},\n                    \"memory\": ${Slot_worker_memory}\n                  },\n                  \"requests\": {\n                    \"cpu\": ${Slot_worker_cpu},\n                    \"memory\": ${Slot_worker_memory}\n                  }\n                }\n              }\n            ],\n            \"imagePullSecrets\": [\n              {\n                \"name\": \"regcred\"\n              }\n            ],\n            \"volumes\": ${Slot_volumes}\n          }\n        },\n        \"pair\": False,\n        \"replicas\": ${Slot_output_partition_num}\n      }\n    }\n  }\n}\n",
                "slots": {
                    "Slot_batch_size": {
                        "default": "",
                        "default_value": 1024.0,
                        "help": "原始数据是一批一批的从文件系统中读出来，batch_size为batch的大小",
                        "label": "Batch大小",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "INT"
                    },
                    "Slot_builder_compressed_type": {
                        "default": "",
                        "default_value": "",
                        "help": "choices=['', 'ZLIB', 'GZIP']  the format for output file",
                        "label": "输出压缩格式",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_check_success_tag": {
                        "default": "",
                        "default_value": "",
                        "help": "choices:['','--check_success_tag'] means false and true, Check that a _SUCCESS file exists before processing files in a subfolder",
                        "label": "是否检查成功标志",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_compressed_type": {
                        "default": "",
                        "default_value": "",
                        "help": "choices=['', 'ZLIB', 'GZIP']  the compressed type of input data file",
                        "label": "压缩方式",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_data_portal_type": {
                        "default": "",
                        "default_value": "PSI",
                        "help": "运行过一次后修改无效！！ the type of data portal type ,choices=['PSI', 'Streaming']",
                        "label": "数据入口类型",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_file_wildcard": {
                        "default": "",
                        "default_value": "*.rd",
                        "help": "文件名称的通配符， 将会读取input_base_dir下所以满足条件的文件，如\n1. *.csv，意为读取所有csv格式文件\n2. *.tfrecord，意为读取所有tfrecord格式文件\n3. xxx.txt，意为读取文件名为xxx.txt的文件",
                        "label": "文件名称的通配符",
                        "reference": "workflow.variables.file_wildcard",
                        "reference_type": "WORKFLOW",
                        "value_type": "STRING"
                    },
                    "Slot_files_per_job_limit": {
                        "default": "",
                        "default_value": null,
                        "help": "空即不设限制，Max number of files in a job",
                        "label": "每个任务最多文件数",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "INT"
                    },
                    "Slot_image": {
                        "default": "",
                        "default_value": "artifact.bytedance.com/fedlearner/fedlearner:50a6945",
                        "help": "建议不修改，指定Pod中运行的容器镜像地址，修改此项可能导致本基本模版不适用",
                        "label": "容器镜像",
                        "reference": "workflow.variables.image",
                        "reference_type": "WORKFLOW",
                        "value_type": "STRING"
                    },
                    "Slot_input_base_dir": {
                        "default": "",
                        "default_value": "/app/deploy/integrated_test/tfrecord_raw_data",
                        "help": "必须修改，运行过一次后修改无效！！the base dir of input directory",
                        "label": "输入路径",
                        "reference": "workflow.variables.input_base_dir",
                        "reference_type": "WORKFLOW",
                        "value_type": "STRING"
                    },
                    "Slot_input_data_format": {
                        "default": "",
                        "default_value": "TF_RECORD",
                        "help": "choices=['TF_RECORD', 'CSV_DICT']  the type for input data iterator",
                        "label": "输入数据格式",
                        "reference": "workflow.variables.input_data_format",
                        "reference_type": "WORKFLOW",
                        "value_type": "STRING"
                    },
                    "Slot_labels": {
                        "default": "",
                        "default_value": {},
                        "help": "建议不修改，格式： {}",
                        "label": "FLAPP额外元信息",
                        "reference": "system.variables.labels",
                        "reference_type": "SYSTEM",
                        "value_type": "OBJECT"
                    },
                    "Slot_long_running": {
                        "default": "",
                        "default_value": "",
                        "help": "choices: ['','--long_running']否，是。是否为常驻上传原始数据",
                        "label": "是否常驻",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_master_cpu": {
                        "default": "",
                        "default_value": "2000m",
                        "help": "Master Pod 所分配的CPU资源（request和limit一致）",
                        "label": "Master的CPU",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_master_envs": {
                        "default": "",
                        "default_value": [],
                        "help": "数组类型，master pod额外的环境变量",
                        "label": "Master额外环境变量",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "LIST"
                    },
                    "Slot_master_memory": {
                        "default": "",
                        "default_value": "3Gi",
                        "help": "Master Pod 所分配的内存资源（request和limit一致）",
                        "label": "Master的内存",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_memory_limit_ratio": {
                        "default": "",
                        "default_value": 70.0,
                        "help": "预测是否会OOM的时候用到，如果预测继续执行下去时占用内存会超过这个比例，就阻塞，直到尚未处理的任务处理完成。 注意这是个40-81之间的整数。",
                        "label": "内存限制比例",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "INT"
                    },
                    "Slot_optional_fields": {
                        "default": "",
                        "default_value": "",
                        "help": "optional stat fields used in joiner, separated by comma between fields, e.g. \"label,rit\"Each field will be stripped",
                        "label": "可选字段",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_output_data_format": {
                        "default": "",
                        "default_value": "TF_RECORD",
                        "help": "choices=['TF_RECORD', 'CSV_DICT']  the format for output file",
                        "label": "输出格式",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_output_partition_num": {
                        "default": "",
                        "default_value": 4.0,
                        "help": "运行过一次后修改无效！！输出数据的文件数量，对应Worker数量",
                        "label": "数据分区的数量",
                        "reference": "workflow.variables.num_partitions",
                        "reference_type": "WORKFLOW",
                        "value_type": "INT"
                    },
                    "Slot_single_subfolder": {
                        "default": "",
                        "default_value": "",
                        "help": "choices:['','--single_subfolder'] 否 是，Only process one subfolder at a time",
                        "label": "是否单一子文件夹",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_storage_root_path": {
                        "default": "",
                        "default_value": "/data",
                        "help": "联邦学习中任务存储根目录",
                        "label": "存储根目录",
                        "reference": "project.variables.storage_root_path",
                        "reference_type": "PROJECT",
                        "value_type": "STRING"
                    },
                    "Slot_volume_mounts": {
                        "default": "",
                        "default_value": [
                            {
                                "mountPath": "/data",
                                "name": "data"
                            }
                        ],
                        "help": "建议不修改，容器中卷挂载的位置，数组类型",
                        "label": "卷挂载位置",
                        "reference": "system.variables.volume_mounts_list",
                        "reference_type": "SYSTEM",
                        "value_type": "LIST"
                    },
                    "Slot_volumes": {
                        "default": "",
                        "default_value": [
                            {
                                "name": "data",
                                "persistentVolumeClaim": {
                                    "claimName": "pvc-fedlearner-default"
                                }
                            }
                        ],
                        "help": "建议不修改，数组类型，和volume_mounts一一对应",
                        "label": "为Pod提供的卷",
                        "reference": "system.variables.volumes_list",
                        "reference_type": "SYSTEM",
                        "value_type": "LIST"
                    },
                    "Slot_worker_cpu": {
                        "default": "",
                        "default_value": "2000m",
                        "help": "Worker Pod 所分配的CPU资源（request和limit一致）",
                        "label": "Worker的CPU",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_worker_envs": {
                        "default": "",
                        "default_value": [],
                        "help": "数组类型，worker pod额外的环境变量",
                        "label": "Worker额外环境变量",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "LIST"
                    },
                    "Slot_worker_memory": {
                        "default": "",
                        "default_value": "3Gi",
                        "help": "Worker Pod 所分配的内存资源（request和limit一致）",
                        "label": "Worker的内存",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    }
                },
                "variables": []
            },
            "raw-data-job-streaming": {
                "meta_yaml": "{\n  \"apiVersion\": \"fedlearner.k8s.io/v1alpha1\",\n  \"kind\": \"FLApp\",\n  \"metadata\": {\n    \"name\": self.name,\n    \"namespace\": system.variables.namespace,\n    \"annotations\":{\n        \"queue\": \"fedlearner\",\n        \"schedulerName\": \"batch\"\n    },\n    \"labels\": ${Slot_labels}\n  },\n  \"spec\": {\n    \"role\": \"Follower\",\n    \"peerSpecs\": {\n      \"Leader\": {\n        \"peerURL\": \"\",\n        \"authority\": \"\"\n      }\n    },\n    \"flReplicaSpecs\": {\n      \"Master\": {\n        \"template\": {\n          \"spec\": {\n            \"restartPolicy\": \"Never\",\n            \"containers\": [\n              {\n                \"env\": system.basic_envs_list + [\n                  {\n                    \"name\": \"STORAGE_ROOT_PATH\",\n                    \"value\": ${Slot_storage_root_path}\n                  },\n                    {\n                    \"name\": \"EGRESS_URL\",\n                    \"value\": \"fedlearner-stack-ingress-nginx-controller.default.svc:80\"\n                  },\n                  {\n                    \"name\": \"EGRESS_HOST\",\n                    \"value\": project.participants[0].egress_host\n                  },\n                  {\n                    \"name\": \"EGRESS_DOMAIN\",\n                    \"value\": project.participants[0].egress_domain\n                  },\n                  {\n                    \"name\": \"APPLICATION_ID\",\n                    \"value\": self.name\n                  },\n                  {\n                    \"name\": \"DATA_PORTAL_NAME\",\n                    \"value\": self.name\n                  },\n                    {\n                    \"name\": \"DATA_PORTAL_TYPE\",\n                    \"value\": ${Slot_data_portal_type}\n                  },\n                  {\n                    \"name\": \"OUTPUT_PARTITION_NUM\",\n                    \"value\": str(${Slot_output_partition_num})\n                  },\n                  {\n                    \"name\": \"INPUT_BASE_DIR\",\n                    \"value\": ${Slot_input_base_dir}\n                  },\n                  {\n                    \"name\": \"OUTPUT_BASE_DIR\",\n                    \"value\": ${Slot_storage_root_path} + \"/raw_data/\" + self.name\n                  },\n                  {\n                    \"name\": \"RAW_DATA_PUBLISH_DIR\",\n                    \"value\": \"portal_publish_dir/\" + self.name\n                  },\n                  {\n                    \"name\": \"FILE_WILDCARD\",\n                    \"value\": ${Slot_file_wildcard}\n                  },\n                  {\n                    \"name\": \"LONG_RUNNING\",\n                    \"value\": ${Slot_long_running}\n                  },\n                  {\n                    \"name\": \"CHECK_SUCCESS_TAG\",\n                    \"value\": ${Slot_check_success_tag}\n                  },\n                  {\n                    \"name\": \"FILES_PER_JOB_LIMIT\",\n                    \"value\": str(${Slot_files_per_job_limit})\n                  },\n                  {\n                    \"name\": \"SINGLE_SUBFOLDER\",\n                    \"value\": ${Slot_single_subfolder}\n                  }\n\n                ] + ${Slot_master_envs},\n                \"imagePullPolicy\": \"IfNotPresent\",\n                \"name\": \"tensorflow\",\n                \"volumeMounts\": ${Slot_volume_mounts},\n                \"image\": ${Slot_image},\n                \"ports\": [\n                  {\n                    \"containerPort\": 50051,\n                    \"name\": \"flapp-port\",\n                    \"protocol\": \"TCP\"\n                  }\n                ],\n                \"command\": [\n                  \"/app/deploy/scripts/data_portal/run_data_portal_master.sh\"\n                ],\n                \"args\": [\n                ],\n                \"resources\": {\n                  \"limits\": {\n                    \"cpu\": ${Slot_master_cpu},\n                    \"memory\": ${Slot_master_memory}\n                  },\n                  \"requests\": {\n                    \"cpu\": ${Slot_master_cpu},\n                    \"memory\": ${Slot_master_memory}\n                  }\n                }\n              }\n            ],\n            \"imagePullSecrets\": [\n              {\n                \"name\": \"regcred\"\n              }\n            ],\n            \"volumes\": ${Slot_volumes}\n          }\n        },\n        \"pair\": False,\n        \"replicas\": 1\n      },\n      \"Worker\": {\n        \"template\": {\n          \"spec\": {\n            \"restartPolicy\": \"Never\",\n            \"containers\": [\n              {\n                \"env\": system.basic_envs_list + [\n                  {\n                    \"name\": \"STORAGE_ROOT_PATH\",\n                    \"value\": ${Slot_storage_root_path}\n                  },\n                  {\n                    \"name\": \"APPLICATION_ID\",\n                    \"value\": self.name\n                  },\n                  {\n                    \"name\": \"OUTPUT_BASE_DIR\",\n                    \"value\": ${Slot_storage_root_path} + \"/data_source/\" + self.name\n                  },\n                  {\n                    \"name\": \"EGRESS_URL\",\n                    \"value\": \"fedlearner-stack-ingress-nginx-controller.default.svc:80\"\n                  },\n                  {\n                    \"name\": \"EGRESS_HOST\",\n                    \"value\": project.participants[0].egress_host\n                  },\n                  {\n                    \"name\": \"EGRESS_DOMAIN\",\n                    \"value\": project.participants[0].egress_domain\n                  },\n\n                  {\n                    \"name\": \"BATCH_SIZE\",\n                    \"value\": str(${Slot_batch_size})\n                  },\n                  {\n                    \"name\": \"INPUT_DATA_FORMAT\",\n                    \"value\": ${Slot_input_data_format}\n                  },\n                  {\n                    \"name\": \"COMPRESSED_TYPE\",\n                    \"value\": ${Slot_compressed_type}\n                  },\n                  {\n                    \"name\": \"OUTPUT_DATA_FORMAT\",\n                    \"value\": ${Slot_output_data_format}\n                  },\n                  {\n                    \"name\": \"BUILDER_COMPRESSED_TYPE\",\n                    \"value\": ${Slot_builder_compressed_type}\n                  },\n                  {\n                    \"name\": \"MEMORY_LIMIT_RATIO\",\n                    \"value\": str(${Slot_memory_limit_ratio})\n                  },\n                  {\n                    \"name\": \"OPTIONAL_FIELDS\",\n                    \"value\": ${Slot_optional_fields}\n                  }\n\n\n                ] + ${Slot_worker_envs},\n                \"imagePullPolicy\": \"IfNotPresent\",\n                \"name\": \"tensorflow\",\n                \"volumeMounts\": ${Slot_volume_mounts},\n                \"image\": ${Slot_image},\n                \"ports\": [\n                  {\n                    \"containerPort\": 50051,\n                    \"name\": \"flapp-port\",\n                    \"protocol\": \"TCP\"\n                  }\n                ],\n                \"command\": [\n                  \"/app/deploy/scripts/data_portal/run_data_portal_worker.sh\"\n                ],\n                \"args\": [\n                ],\n                \"resources\": {\n                  \"limits\": {\n                    \"cpu\": ${Slot_worker_cpu},\n                    \"memory\": ${Slot_worker_memory}\n                  },\n                  \"requests\": {\n                    \"cpu\": ${Slot_worker_cpu},\n                    \"memory\": ${Slot_worker_memory}\n                  }\n                }\n              }\n            ],\n            \"imagePullSecrets\": [\n              {\n                \"name\": \"regcred\"\n              }\n            ],\n            \"volumes\": ${Slot_volumes}\n          }\n        },\n        \"pair\": False,\n        \"replicas\": ${Slot_output_partition_num}\n      }\n    }\n  }\n}\n",
                "slots": {
                    "Slot_batch_size": {
                        "default": "",
                        "default_value": 1024.0,
                        "help": "原始数据是一批一批的从文件系统中读出来，batch_size为batch的大小",
                        "label": "Batch大小",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "INT"
                    },
                    "Slot_builder_compressed_type": {
                        "default": "",
                        "default_value": "",
                        "help": "choices=['', 'ZLIB', 'GZIP']  the format for output file",
                        "label": "输出压缩格式",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_check_success_tag": {
                        "default": "",
                        "default_value": "",
                        "help": "choices:['','--check_success_tag'] means false and true, Check that a _SUCCESS file exists before processing files in a subfolder",
                        "label": "是否检查成功标志",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_compressed_type": {
                        "default": "",
                        "default_value": "",
                        "help": "choices=['', 'ZLIB', 'GZIP']  the compressed type of input data file",
                        "label": "压缩方式",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_data_portal_type": {
                        "default": "",
                        "default_value": "Streaming",
                        "help": "运行过一次后修改无效！！ the type of data portal type ,choices=['PSI', 'Streaming']",
                        "label": "数据入口类型",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_file_wildcard": {
                        "default": "",
                        "default_value": "*.rd",
                        "help": "文件名称的通配符， 将会读取input_base_dir下所以满足条件的文件，如\n1. *.csv，意为读取所有csv格式文件\n2. *.tfrecord，意为读取所有tfrecord格式文件\n3. xxx.txt，意为读取文件名为xxx.txt的文件",
                        "label": "文件名称的通配符",
                        "reference": "workflow.variables.file_wildcard",
                        "reference_type": "WORKFLOW",
                        "value_type": "STRING"
                    },
                    "Slot_files_per_job_limit": {
                        "default": "",
                        "default_value": null,
                        "help": "空即不设限制，Max number of files in a job",
                        "label": "每个任务最多文件数",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "INT"
                    },
                    "Slot_image": {
                        "default": "",
                        "default_value": "artifact.bytedance.com/fedlearner/fedlearner:50a6945",
                        "help": "建议不修改，指定Pod中运行的容器镜像地址，修改此项可能导致本基本模版不适用",
                        "label": "容器镜像",
                        "reference": "workflow.variables.image",
                        "reference_type": "WORKFLOW",
                        "value_type": "STRING"
                    },
                    "Slot_input_base_dir": {
                        "default": "",
                        "default_value": "/app/deploy/integrated_test/tfrecord_raw_data",
                        "help": "必须修改，运行过一次后修改无效！！the base dir of input directory",
                        "label": "输入路径",
                        "reference": "workflow.variables.input_base_dir",
                        "reference_type": "WORKFLOW",
                        "value_type": "STRING"
                    },
                    "Slot_input_data_format": {
                        "default": "",
                        "default_value": "TF_RECORD",
                        "help": "choices=['TF_RECORD', 'CSV_DICT']  the type for input data iterator",
                        "label": "输入数据格式",
                        "reference": "workflow.variables.input_data_format",
                        "reference_type": "WORKFLOW",
                        "value_type": "STRING"
                    },
                    "Slot_labels": {
                        "default": "",
                        "default_value": {},
                        "help": "建议不修改，格式： {}",
                        "label": "FLAPP额外元信息",
                        "reference": "system.variables.labels",
                        "reference_type": "SYSTEM",
                        "value_type": "OBJECT"
                    },
                    "Slot_long_running": {
                        "default": "",
                        "default_value": "",
                        "help": "choices: ['','--long_running']否，是。是否为常驻上传原始数据",
                        "label": "是否常驻",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_master_cpu": {
                        "default": "",
                        "default_value": "2000m",
                        "help": "Master Pod 所分配的CPU资源（request和limit一致）",
                        "label": "Master的CPU",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_master_envs": {
                        "default": "",
                        "default_value": [],
                        "help": "数组类型，master pod额外的环境变量",
                        "label": "Master额外环境变量",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "LIST"
                    },
                    "Slot_master_memory": {
                        "default": "",
                        "default_value": "3Gi",
                        "help": "Master Pod 所分配的内存资源（request和limit一致）",
                        "label": "Master的内存",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_memory_limit_ratio": {
                        "default": "",
                        "default_value": 70.0,
                        "help": "预测是否会OOM的时候用到，如果预测继续执行下去时占用内存会超过这个比例，就阻塞，直到尚未处理的任务处理完成。 注意这是个40-81之间的整数。",
                        "label": "内存限制比例",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "INT"
                    },
                    "Slot_optional_fields": {
                        "default": "",
                        "default_value": "",
                        "help": "optional stat fields used in joiner, separated by comma between fields, e.g. \"label,rit\"Each field will be stripped",
                        "label": "可选字段",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_output_data_format": {
                        "default": "",
                        "default_value": "TF_RECORD",
                        "help": "choices=['TF_RECORD', 'CSV_DICT']  the format for output file",
                        "label": "输出格式",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_output_partition_num": {
                        "default": "",
                        "default_value": 4.0,
                        "help": "运行过一次后修改无效！！输出数据的文件数量，对应Worker数量",
                        "label": "数据分区的数量",
                        "reference": "workflow.variables.num_partitions",
                        "reference_type": "WORKFLOW",
                        "value_type": "INT"
                    },
                    "Slot_single_subfolder": {
                        "default": "",
                        "default_value": "",
                        "help": "choices:['','--single_subfolder'] 否 是，Only process one subfolder at a time",
                        "label": "是否单一子文件夹",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_storage_root_path": {
                        "default": "",
                        "default_value": "/data",
                        "help": "联邦学习中任务存储根目录",
                        "label": "存储根目录",
                        "reference": "project.variables.storage_root_path",
                        "reference_type": "PROJECT",
                        "value_type": "STRING"
                    },
                    "Slot_volume_mounts": {
                        "default": "",
                        "default_value": [
                            {
                                "mountPath": "/data",
                                "name": "data"
                            }
                        ],
                        "help": "建议不修改，容器中卷挂载的位置，数组类型",
                        "label": "卷挂载位置",
                        "reference": "system.variables.volume_mounts_list",
                        "reference_type": "SYSTEM",
                        "value_type": "LIST"
                    },
                    "Slot_volumes": {
                        "default": "",
                        "default_value": [
                            {
                                "name": "data",
                                "persistentVolumeClaim": {
                                    "claimName": "pvc-fedlearner-default"
                                }
                            }
                        ],
                        "help": "建议不修改，数组类型，和volume_mounts一一对应",
                        "label": "为Pod提供的卷",
                        "reference": "system.variables.volumes_list",
                        "reference_type": "SYSTEM",
                        "value_type": "LIST"
                    },
                    "Slot_worker_cpu": {
                        "default": "",
                        "default_value": "2000m",
                        "help": "Worker Pod 所分配的CPU资源（request和limit一致）",
                        "label": "Worker的CPU",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_worker_envs": {
                        "default": "",
                        "default_value": [],
                        "help": "数组类型，worker pod额外的环境变量",
                        "label": "Worker额外环境变量",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "LIST"
                    },
                    "Slot_worker_memory": {
                        "default": "",
                        "default_value": "3Gi",
                        "help": "Worker Pod 所分配的内存资源（request和limit一致）",
                        "label": "Worker的内存",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    }
                },
                "variables": []
            },
            "tree-train": {
                "meta_yaml": "{\n  \"apiVersion\": \"fedlearner.k8s.io/v1alpha1\",\n  \"kind\": \"FLApp\",\n  \"metadata\": {\n      \"name\": self.name,\n      \"namespace\": system.variables.namespace,\n      \"annotations\":{\n          \"queue\": \"fedlearner\",\n          \"schedulerName\": \"batch\"\n      },\n    \"labels\": ${Slot_labels}\n  },\n  \"spec\": {\n      \"role\": ${Slot_role},\n      \"cleanPodPolicy\": \"All\",\n      \"peerSpecs\": {\n          \"Leader\" if ${Slot_role}==\"Follower\" else \"Follower\": {\n              \"peerURL\": \"fedlearner-stack-ingress-nginx-controller.default.svc:80\",\n              \"authority\": project.participants[0].egress_host,\n              \"extraHeaders\": {\n                  \"x-host\": \"fedlearner-operator.\" + project.participants[0].egress_domain\n              }\n          }\n      },\n      \"flReplicaSpecs\": {\n          \"Worker\": {\n              \"template\": {\n                  \"spec\": {\n                      \"restartPolicy\": \"Never\",\n                      \"containers\": [\n                          {\n                              \"env\": system.basic_envs_list + [\n                                  {\n                                      \"name\": \"STORAGE_ROOT_PATH\",\n                                      \"value\": ${Slot_storage_root_path}\n                                  },\n                                  {\n                                      \"name\": \"ROLE\",\n                                      \"value\": ${Slot_role}.lower()\n                                  },\n                                  {\n                                      \"name\": \"APPLICATION_ID\",\n                                      \"value\": self.name\n                                  },\n                                  {\n                                      \"name\": \"OUTPUT_BASE_DIR\",\n                                      \"value\": ${Slot_storage_root_path} + \"/job_output/\" + self.name\n                                  },\n                                  {\n                                      \"name\": \"EGRESS_URL\",\n                                      \"value\": \"fedlearner-stack-ingress-nginx-controller.default.svc:80\"\n                                  },\n                                  {\n                                      \"name\": \"EGRESS_HOST\",\n                                      \"value\": project.participants[0].egress_host\n                                  },\n                                  {\n                                      \"name\": \"EGRESS_DOMAIN\",\n                                      \"value\": project.participants[0].egress_domain\n                                  },\n                                  {\n                                      \"name\": \"MODE\",\n                                      \"value\": ${Slot_mode}\n                                  },\n                                  {\n                                      \"name\": \"LOSS_TYPE\",\n                                      \"value\": ${Slot_loss_type}\n                                  },\n                                  {\n                                      \"name\": \"DATA_SOURCE\",\n                                      \"value\": ${Slot_data_source}\n                                  },\n                                  {\n                                      \"name\": \"DATA_PATH\",\n                                      \"value\": ${Slot_data_path}\n                                  },\n                                  {\n                                      \"name\": \"VALIDATION_DATA_PATH\",\n                                      \"value\": ${Slot_validation_data_path}\n                                  },\n                                  {\n                                      \"name\": \"NO_DATA\",\n                                      \"value\": str(${Slot_no_data})\n                                  },\n                                  {\n                                      \"name\": \"FILE_EXT\",\n                                      \"value\": ${Slot_file_ext}\n                                  },\n                                  {\n                                      \"name\": \"FILE_TYPE\",\n                                      \"value\": ${Slot_file_type}\n                                  },\n                                  {\n                                      \"name\": \"LOAD_MODEL_PATH\",\n                                      \"value\": ${Slot_load_model_path}\n                                  },\n                                  {\n                                      \"name\": \"LOAD_MODEL_NAME\",\n                                      \"value\": ${Slot_load_model_name}\n                                  },\n                                  {\n                                      \"name\": \"VERBOSITY\",\n                                      \"value\": str(${Slot_verbosity})\n                                  },\n                                  {\n                                      \"name\": \"LEARNING_RATE\",\n                                      \"value\": str(${Slot_learning_rate})\n                                  },\n                                  {\n                                      \"name\": \"MAX_ITERS\",\n                                      \"value\": str(${Slot_max_iters})\n                                  },\n                                  {\n                                      \"name\": \"MAX_DEPTH\",\n                                      \"value\": str(${Slot_max_depth})\n                                  },\n                                  {\n                                      \"name\": \"MAX_BINS\",\n                                      \"value\": str(${Slot_max_bins})\n                                  },\n                                  {\n                                      \"name\": \"L2_REGULARIZATION\",\n                                      \"value\": str(${Slot_l2_regularization})\n                                  },\n                                  {\n                                      \"name\": \"NUM_PARALLEL\",\n                                      \"value\": str(${Slot_num_parallel})\n                                  },\n                                  {\n                                      \"name\": \"VERIFY_EXAMPLE_IDS\",\n                                      \"value\": str(${Slot_verify_example_ids})\n                                  },\n                                  {\n                                      \"name\": \"IGNORE_FIELDS\",\n                                      \"value\": ${Slot_ignore_fields}\n                                  },\n                                  {\n                                      \"name\": \"CAT_FIELDS\",\n                                      \"value\": ${Slot_cat_fields}\n                                  },\n                                  {\n                                      \"name\": \"LABEL_FIELD\",\n                                      \"value\": ${Slot_label_field}\n                                  },\n                                  {\n                                      \"name\": \"SEND_SCORES_TO_FOLLOWER\",\n                                      \"value\": str(${Slot_send_scores_to_follower})\n                                  },\n                                  {\n                                      \"name\": \"SEND_METRICS_TO_FOLLOWER\",\n                                      \"value\": str(${Slot_send_metrics_to_follower})\n                                  },\n                                  {\n                                      \"name\": \"ENABLE_PACKING\",\n                                      \"value\": str(${Slot_enable_packing})\n                                  },\n                                  {\n                                      \"name\": \"ES_BATCH_SIZE\",\n                                      \"value\": str(${Slot_es_batch_size})\n                                  }\n                              ] + ${Slot_worker_envs},\n                              \"imagePullPolicy\": \"IfNotPresent\",\n                              \"name\": \"tensorflow\",\n                              \"volumeMounts\": ${Slot_volume_mounts},\n                              \"image\": ${Slot_image},\n                              \"ports\": [\n                                  {\n                                      \"containerPort\": 50051,\n                                      \"name\": \"flapp-port\",\n                                      \"protocol\": \"TCP\"\n                                  },\n                                  {\n                                      \"containerPort\": 50052,\n                                      \"name\": \"tf-port\",\n                                      \"protocol\": \"TCP\"\n                                  }\n                              ],\n                              \"command\": [\n                                  \"/app/deploy/scripts/wait4pair_wrapper.sh\"\n                              ],\n                              \"args\": [\n                                  \"/app/deploy/scripts/trainer/run_tree_worker.sh\"\n                              ],\n                              \"resources\": {\n                                  \"limits\": {\n                                      \"cpu\": ${Slot_worker_cpu},\n                                      \"memory\": ${Slot_worker_mem}\n                                  },\n                                  \"requests\": {\n                                      \"cpu\": ${Slot_worker_cpu},\n                                      \"memory\": ${Slot_worker_mem}\n                                  }\n                              }\n                          }\n                      ],\n                      \"imagePullSecrets\": [\n                          {\n                              \"name\": \"regcred\"\n                          }\n                      ],\n                      \"volumes\": ${Slot_volumes}\n                  }\n              },\n              \"pair\": True,\n              \"replicas\": 1\n          }\n      }\n  }\n}\n",
                "slots": {
                    "Slot_cat_fields": {
                        "default": "",
                        "default_value": "",
                        "help": "类别类型特征，特征的值需要是非负整数。以逗号分隔如：alive,country,sex",
                        "label": "类别类型特征",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_data_path": {
                        "default": "",
                        "default_value": "",
                        "help": "数据存放位置",
                        "label": "数据存放位置",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_data_source": {
                        "default": "",
                        "default_value": "",
                        "help": "求交数据集名称",
                        "label": "求交数据集名称",
                        "reference": "workflow.jobs['psi-data-join-job'].name",
                        "reference_type": "JOB_PROPERTY",
                        "value_type": "STRING"
                    },
                    "Slot_enable_packing": {
                        "default": "",
                        "default_value": true,
                        "help": "是否开启优化",
                        "label": "是否开启优化",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "BOOL"
                    },
                    "Slot_es_batch_size": {
                        "default": "",
                        "default_value": 10.0,
                        "help": "ES_BATCH_SIZE",
                        "label": "ES_BATCH_SIZE",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "INT"
                    },
                    "Slot_file_ext": {
                        "default": "",
                        "default_value": ".csv",
                        "help": "文件后缀",
                        "label": "文件后缀",
                        "reference": "self.variables.file_ext",
                        "reference_type": "SELF",
                        "value_type": "STRING"
                    },
                    "Slot_file_type": {
                        "default": "",
                        "default_value": "csv",
                        "help": "文件类型，csv或tfrecord",
                        "label": "文件类型，csv或tfrecord",
                        "reference": "self.variables.file_type",
                        "reference_type": "SELF",
                        "value_type": "STRING"
                    },
                    "Slot_ignore_fields": {
                        "default": "",
                        "default_value": "",
                        "help": "以逗号分隔如：name,age,sex",
                        "label": "不入模的特征",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_image": {
                        "default": "",
                        "default_value": "artifact.bytedance.com/fedlearner/fedlearner:50a6945",
                        "help": "建议不修改，指定Pod中运行的容器镜像地址，修改此项可能导致本基本模版不适用",
                        "label": "容器镜像",
                        "reference": "workflow.variables.image",
                        "reference_type": "WORKFLOW",
                        "value_type": "STRING"
                    },
                    "Slot_l2_regularization": {
                        "default": "",
                        "default_value": 1.0,
                        "help": "L2惩罚系数",
                        "label": "L2惩罚系数",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "NUMBER"
                    },
                    "Slot_label_field": {
                        "default": "",
                        "default_value": "label",
                        "help": "label特征名",
                        "label": "label特征名",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_labels": {
                        "default": "",
                        "default_value": {},
                        "help": "建议不修改，格式： {}",
                        "label": "FLAPP额外元信息",
                        "reference": "system.variables.labels",
                        "reference_type": "SYSTEM",
                        "value_type": "OBJECT"
                    },
                    "Slot_learning_rate": {
                        "default": "",
                        "default_value": 0.3,
                        "help": "学习率",
                        "label": "学习率",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "NUMBER"
                    },
                    "Slot_load_model_name": {
                        "default": "",
                        "default_value": "",
                        "help": "按任务名称加载模型，{STORAGE_ROOT_PATH}/job_output/{LOAD_MODEL_NAME}/exported_models",
                        "label": "模型任务名称",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_load_model_path": {
                        "default": "",
                        "default_value": "",
                        "help": "模型文件地址",
                        "label": "模型文件地址",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_loss_type": {
                        "default": "",
                        "default_value": "logistic",
                        "help": "损失函数类型，logistic或mse，默认logistic",
                        "label": "损失函数类型",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_max_bins": {
                        "default": "",
                        "default_value": 33.0,
                        "help": "最大分箱数",
                        "label": "最大分箱数",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "INT"
                    },
                    "Slot_max_depth": {
                        "default": "",
                        "default_value": 3.0,
                        "help": "最大深度",
                        "label": "最大深度",
                        "reference": "self.variables.max_depth",
                        "reference_type": "SELF",
                        "value_type": "INT"
                    },
                    "Slot_max_iters": {
                        "default": "",
                        "default_value": 5.0,
                        "help": "树的数量",
                        "label": "迭代数",
                        "reference": "self.variables.max_iters",
                        "reference_type": "SELF",
                        "value_type": "INT"
                    },
                    "Slot_mode": {
                        "default": "",
                        "default_value": "train",
                        "help": "任务类型，train或eval",
                        "label": "任务类型，train或eval",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_no_data": {
                        "default": "",
                        "default_value": false,
                        "help": "Leader是否没数据",
                        "label": "Leader是否没数据",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "BOOL"
                    },
                    "Slot_num_parallel": {
                        "default": "",
                        "default_value": 1.0,
                        "help": "进程数量",
                        "label": "进程数量",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "INT"
                    },
                    "Slot_role": {
                        "default": "",
                        "default_value": "Leader",
                        "help": "Flapp 通讯时的角色 Leader 或 Follower",
                        "label": "Flapp通讯时角色",
                        "reference": "workflow.variables.role",
                        "reference_type": "WORKFLOW",
                        "value_type": "STRING"
                    },
                    "Slot_send_metrics_to_follower": {
                        "default": "",
                        "default_value": false,
                        "help": "是否发送指标到follower",
                        "label": "是否发送指标到follower",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "BOOL"
                    },
                    "Slot_send_scores_to_follower": {
                        "default": "",
                        "default_value": false,
                        "help": "是否发送结果到follower",
                        "label": "是否发送结果到follower",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "BOOL"
                    },
                    "Slot_storage_root_path": {
                        "default": "",
                        "default_value": "/data",
                        "help": "联邦学习中任务存储根目录",
                        "label": "存储根目录",
                        "reference": "project.variables.storage_root_path",
                        "reference_type": "PROJECT",
                        "value_type": "STRING"
                    },
                    "Slot_validation_data_path": {
                        "default": "",
                        "default_value": "",
                        "help": "验证数据集地址",
                        "label": "验证数据集地址",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_verbosity": {
                        "default": "",
                        "default_value": 1.0,
                        "help": "日志输出等级",
                        "label": "日志输出等级",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "INT"
                    },
                    "Slot_verify_example_ids": {
                        "default": "",
                        "default_value": false,
                        "help": "是否检查example_id对齐 If set to true, the first column of the data will be treated as example ids that must match between leader and follower",
                        "label": "是否检查example_id对齐",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "BOOL"
                    },
                    "Slot_volume_mounts": {
                        "default": "",
                        "default_value": [
                            {
                                "mountPath": "/data",
                                "name": "data"
                            }
                        ],
                        "help": "建议不修改，容器中卷挂载的位置，数组类型",
                        "label": "卷挂载位置",
                        "reference": "system.variables.volume_mounts_list",
                        "reference_type": "SYSTEM",
                        "value_type": "LIST"
                    },
                    "Slot_volumes": {
                        "default": "",
                        "default_value": [
                            {
                                "name": "data",
                                "persistentVolumeClaim": {
                                    "claimName": "pvc-fedlearner-default"
                                }
                            }
                        ],
                        "help": "建议不修改，数组类型，和volume_mounts一一对应",
                        "label": "为Pod提供的卷",
                        "reference": "system.variables.volumes_list",
                        "reference_type": "SYSTEM",
                        "value_type": "LIST"
                    },
                    "Slot_worker_cpu": {
                        "default": "",
                        "default_value": "2000m",
                        "help": "所需CPU",
                        "label": "所需CPU",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    },
                    "Slot_worker_envs": {
                        "default": "",
                        "default_value": [],
                        "help": "数组类型，worker pod额外的环境变量",
                        "label": "Worker额外环境变量",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "LIST"
                    },
                    "Slot_worker_mem": {
                        "default": "",
                        "default_value": "4Gi",
                        "help": "所需内存",
                        "label": "所需内存",
                        "reference": "",
                        "reference_type": "DEFAULT",
                        "value_type": "STRING"
                    }
                },
                "variables": []
            }
        }
    },
    "group_alias": "e2e-test",
    "name": "e2e-fed-right"
}