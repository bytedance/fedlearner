/* Copyright 2023 The FedLearner Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package fedlearner_webconsole.proto;

// NextID: 9
message RunnerInput {
    reserved 6;
    // {item_type}_{item_id}
    string runner_name = 1 [deprecated = true];
    // Ref to ItemType enum, here is the enum value.
    string runner_type = 2;
    oneof runner_input {
        DatasetDeleterInput dataset_deleter_input = 3;
        BatchStatsInput batch_stats_input = 4;
        WorkflowCronJobInput workflow_cron_job_input = 5;
        ModelSignatureParserInput model_signature_parser_input = 7;
        ModelTrainingCronJobInput model_training_cron_job_input = 8;
    }
}

// NextID: 2
message TicketList {
    repeated int32 ids = 1;
}

// NextID: 4
message TicketHelperOutput {
    map<string, TicketList> updated_ticket = 1;
    map<string, TicketList> unupdated_ticket = 2;
    map<string, TicketList> failed_ticket = 3;
}

// NextID: 13
// TODO(liuhehan): deprecate dataset_job_scheduler_output and dataset_cron_job_scheduler_output
message RunnerOutput {
    string error_message = 1;
    oneof runner_output {
        WorkflowSchedulerOutput workflow_scheduler_output = 2;
        DatasetJobSchedulerOutput dataset_job_scheduler_output = 3;
        WorkflowCronJobOutput workflow_cron_job_output = 4;
        CleanupCronJobOutput cleanup_cron_job_output = 5;
        JobSchedulerOutput job_scheduler_output = 6;
        ModelTrainingCronJobOutput model_training_cron_job_output = 7;
        TeeRunnerOutput tee_runner_output = 8;
        DatasetCronJobSchedulerOutput dataset_cron_job_scheduler_output = 9;
        PendingProjectSchedulerOutput pending_project_scheduler_output = 10;
        DatasetSchedulerOutput dataset_scheduler_output = 11;
        TicketHelperOutput ticket_helper_output = 12;
    }
}

message Pipeline {
    // For compatible reason, we need this flag to indicate the logic.
    int32 version = 1;
    string name = 2;
    // FIFO queue, defines the execution order.
    repeated RunnerInput queue = 3;
}

message PipelineContextData {
    // Index of current runner.
    int32 current_runner = 1;
    // Outputs of runners, key is the runner index.
    map<int32, RunnerOutput> outputs = 2;
}

message BatchStatsInput {
    reserved 2;
    int64 batch_id = 1;
}

message DatasetDeleterInput {
    int64 dataset_id = 1;
}

message WorkflowSchedulerOutput {
    message WorkflowExecution {
        int64 id = 1;
        string error_message = 2;
    }
    repeated WorkflowExecution executions = 1;
}

message DatasetJobSchedulerOutput {
    // Scheduled dataset jobs.
    repeated int64 dataset_job_ids = 1;
    // Scheduled dataset job stages.
    repeated int64 dataset_job_stage_ids = 2;
}

message CleanupCronJobOutput {
    repeated int64 failed_cleanup_ids = 1;
    repeated int64 succeeded_cleanup_ids = 2;
}

message WorkflowCronJobInput {
    int64 workflow_id = 1;
}

message WorkflowCronJobOutput {
    string message = 1;
}

message ModelSignatureParserInput {
    int64 serving_model_id = 1;
}

message JobSchedulerOutput {
    repeated int64 started_jobs = 1;
    repeated int64 failed_to_start_jobs = 2;
    // Key: job id, message is for debug purpose.
    map<int64, string> messages = 3;
}

message ModelTrainingCronJobInput {
    int64 group_id = 1;
}

message ModelTrainingCronJobOutput {
    string message = 1;
}

message SchedulerItemPb {
    int64 id = 1;
    string name = 2;
    Pipeline pipeline = 3;
    string status = 4;
    string cron_config = 5;
    // Timestamp in seconds
    int64 last_run_at = 6;
    int64 retry_cnt = 7;
    // Timestamp in seconds
    int64 created_at = 8;
    // Timestamp in seconds
    int64 updated_at = 9;
    int64 deleted_at = 10;
}

message SchedulerRunnerPb {
    int64 id = 1;
    int64 item_id = 2;
    string status = 3;
    int64 start_at = 4;
    int64 end_at = 5;
    Pipeline pipeline = 6;
    RunnerOutput output = 7;
    PipelineContextData context = 8;
    int64 created_at = 9;
    int64 updated_at = 10;
    int64 deleted_at = 11;
}

message TeeRunnerOutput {
    repeated int64 created_group_ids = 1;
    repeated int64 launched_group_ids = 2;
    repeated int64 checked_group_ids = 3;
    repeated int64 checked_trusted_job_ids = 4;
    repeated int64 created_trusted_export_job_ids = 5;
    repeated int64 launched_trusted_export_job_ids = 6;
    repeated int64 created_dataset_trusted_export_job_ids = 7;
}

message DatasetCronJobSchedulerOutput {
    // Scheduled dataset jobs
    repeated int64 dataset_job_ids = 1;
    // Created dataset_job_stages
    repeated int64 created_dataset_job_stage_ids = 2;
    // update dataset auth_status cache
    repeated int64 auth_status_updated_dataset_ids = 3;
}

message PendingProjectSchedulerOutput {
    // Scheduled pending projects.
    repeated int64 pending_project_created_ids = 1;
    repeated int64 pending_project_updated_ids = 2;
    repeated string projects_created_uuids = 3;
    repeated int64 pending_project_failed_ids = 4;
}

message DatasetSchedulerOutput {
    // key: executor name
    map<string, ExecutorResults> executor_outputs = 1;
}

message ExecutorResults {
    repeated int64 succeeded_item_ids = 1;
    repeated int64 failed_item_ids = 2;
    repeated int64 skip_item_ids = 3;
}
