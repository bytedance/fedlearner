# Python manifest example

libos.entrypoint = "{{ entrypoint }}"

loader.pal_internal_mem_size = "200M"

# Path to the library OS
loader.preload = "file:{{ graphene.libos }}"

# Graphene log level
loader.log_level = "{{ log_level }}"
#loader.log_file = "/tmp/fl.log"

# Read application arguments directly from the command line. Don't use this on production!
loader.insecure__use_cmdline_argv = true 
loader.insecure__use_host_env = true

# Environment variables for Python
loader.env.LD_LIBRARY_PATH = "{{ python.stdlib }}/lib:/lib:{{ arch_libdir }}:/usr/lib:/usr/{{ arch_libdir }}"

loader.env.tensorflow_session_parallelism = "{{ session_parallelism }}"
loader.env.tensorflow_intra_op_parallelism = "{{ intra_op_parallelism }}"
loader.env.tensorflow_inter_op_parallelism = "{{ inter_op_parallelism }}"

loader.env.GRPC_SGX_RA_TLS_ENABLE = "{{ GRPC_SGX_RA_TLS_ENABLE }}"

# Prorotected_file encryption
loader.env.SECRET_PROVISION_CONSTRUCTOR = "1"
loader.env.SECRET_PROVISION_SET_PF_KEY = "1"

# Allow for injecting SIGTERM signal from the host.
sys.enable_sigterm_injection = true

# Mounted FSes. The following "chroot" FSes mount a part of the host FS into the
# guest. Other parts of the host FS will not be available in the guest.

# Default glibc files, mounted from the Runtime directory in GRAMINE.
fs.mount.lib.type = "chroot"
fs.mount.lib.path = "/lib"
fs.mount.lib.uri = "file:{{ graphene.runtimedir() }}"

# Host-level libraries (e.g., /lib/x86_64-linux-gnu) required by the Python executable
fs.mount.lib2.type = "chroot"
fs.mount.lib2.path = "{{ arch_libdir }}"
fs.mount.lib2.uri = "file:{{ arch_libdir }}"

# Host-level directory (/usr) required by the Python executable
fs.mount.usr.type = "chroot"
fs.mount.usr.path = "/usr"
fs.mount.usr.uri = "file:/usr"

# Mount $PYTHONHOME
fs.mount.pyhome.type = "chroot"
fs.mount.pyhome.path = "{{ python.stdlib }}"
fs.mount.pyhome.uri = "file:{{ python.stdlib }}"

# Mount $PYTHONDISTHOME
fs.mount.pydisthome.type = "chroot"
fs.mount.pydisthome.path = "{{ python.distlib }}"
fs.mount.pydisthome.uri = "file:{{ python.distlib }}"

# Mount /tmp
fs.mount.tmp.type = "chroot"
fs.mount.tmp.path = "/tmp"
fs.mount.tmp.uri = "file:/tmp"

# Mount /etc
fs.mount.etc.type = "chroot"
fs.mount.etc.path = "/etc"
fs.mount.etc.uri = "file:/etc"

# Mount /root/.keras
fs.mount.keras.type = "chroot"
fs.mount.keras.path = "/root/.keras/keras.json"
fs.mount.keras.uri = "file:/root/.keras/keras.json"

# SGX general options

# Set the virtual memory size of the SGX enclave. For SGX v1, the enclave
# size must be specified during signing. If Python needs more virtual memory
# than the enclave size, Graphene will not be able to allocate it.
sgx.enclave_size = "32G"

# Graphene creates stacks of 256KB by default. It is not enough for SciPy/NumPy
# packages, e.g., libopenblas dependency assumes more than 512KB-sized stacks.
sys.stack.size = "128M"

# Set the maximum number of enclave threads. For SGX v1, the number of enclave
# TCSes must be specified during signing, so the application cannot use more
# threads than the number of TCSes. Note that Graphene also creates an internal
# thread for handling inter-process communication (IPC), and potentially another
# thread for asynchronous events. Therefore, the actual number of threads that
# the application can create is (sgx.thread_num - 2).
sgx.thread_num = 512

sgx.nonpie_binary = true

sgx.remote_attestation = true

sgx.protected_files_key = "ffeeddccbbaa99887766554433221100"

sgx.trusted_files = [
  "file:{{ entrypoint }}",
  "file:{{ graphene.runtimedir() }}/",
  "file:{{ arch_libdir }}/",
  "file:/usr/{{ arch_libdir }}/",
  "file:{{ python.stdlib }}/",
  "file:{{ python.distlib }}/",
  "file:/etc/mime.types",
  "file:/etc/default/apport",
  "file:/usr/lib/x86_64-linux-gnu/libmbedx509.so.1",
  "file:/usr/lib/x86_64-linux-gnu/libmbedcrypto.so.6",
  "file:make_data.py",
  "file:leader.py",
  "file:follower.py",
]

sgx.allowed_files = [
  "file:/usr/local/lib/python3.6/dist-packages",
  "file:/usr/lib/python3.6",
  "file:/usr/lib/python3",
  "file:/usr/lib/ssl",
  "file:/usr/lib/gcc",
  "file:/usr/bin/ld",
  "file:/usr/bin/gcc",
  "file:/usr/bin/objdump",
  "file:/etc/ethers",
  "file:/etc/hosts",
  "file:/etc/group",
  "file:/etc/passwd",
  "file:/etc/ld.so.conf",
  "file:/etc/gai.conf",
  "file:/etc/host.conf",
  "file:/etc/resolv.conf",
  "file:/etc/nsswitch.conf",
  "file:/etc/sgx_default_qcnl.conf",
  "file:/etc/ssl/certs/ca-certificates.crt",
  "file:/proc/stat",
  "file:/tmp",
  "file:/root/.keras/keras.json",
  "file:data",
  "file:tensorflow_io.py",
  "file:model",
  "file:dynamic_config.json"
]

#sgx.protected_files = [
#  "file:model",
#]
