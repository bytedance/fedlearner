libos.entrypoint = "{{ entrypoint }}"
libos.check_invalid_pointers = false

loader.preload = "file:{{ gramine.libos }}"
loader.log_level = "{{ log_level }}"
# loader.log_file = ""

loader.pal_internal_mem_size = "500M"

loader.insecure__use_cmdline_argv = true 
loader.insecure__use_host_env = true

loader.env.LD_LIBRARY_PATH = "{{ python.stdlib }}/lib:/lib:{{ arch_libdir }}:/usr/local/lib:/usr/local/{{ arch_libdir }}:/usr/lib:/usr/{{ arch_libdir }}"
loader.env.SECRET_PROVISION_CONSTRUCTOR = "1"
loader.env.SECRET_PROVISION_SET_PF_KEY = "1"

sys.enable_sigterm_injection = true
sys.stack.size = "32M"

fs.mount.lib.type = "chroot"
fs.mount.lib.path = "/lib"
fs.mount.lib.uri = "file:{{ gramine.runtimedir() }}"

fs.mount.lib2.type = "chroot"
fs.mount.lib2.path = "{{ arch_libdir }}"
fs.mount.lib2.uri = "file:{{ arch_libdir }}"

fs.mount.usr.type = "chroot"
fs.mount.usr.path = "/usr"
fs.mount.usr.uri = "file:/usr"

fs.mount.pyhome.type = "chroot"
fs.mount.pyhome.path = "{{ python.stdlib }}"
fs.mount.pyhome.uri = "file:{{ python.stdlib }}"

fs.mount.pydisthome.type = "chroot"
fs.mount.pydisthome.path = "{{ python.distlib }}"
fs.mount.pydisthome.uri = "file:{{ python.distlib }}"

fs.mount.tmp.type = "chroot"
fs.mount.tmp.path = "/tmp"
fs.mount.tmp.uri = "file:/tmp"

fs.mount.etc.type = "chroot"
fs.mount.etc.path = "/etc"
fs.mount.etc.uri = "file:/etc"

fs.mount.keras.type = "chroot"
fs.mount.keras.path = "/root/.keras/keras.json"
fs.mount.keras.uri = "file:/root/.keras/keras.json"

# Note that Gramine also creates an internal
# thread for handling inter-process communication (IPC), and potentially another
# thread for asynchronous events. Therefore, the actual number of threads that
# the application can create is (sgx.thread_num - 2).

sgx.debug = false
sgx.remote_attestation = true
sgx.nonpie_binary = true
sgx.enclave_size = "16G"
sgx.thread_num = 1024
sgx.protected_files_key = "ffeeddccbbaa99887766554433221100"

sgx.trusted_files = [
  "file:{{ entrypoint }}",
  "file:{{ gramine.runtimedir() }}/",
  "file:{{ arch_libdir }}/",
  "file:/usr/{{ arch_libdir }}/",
  "file:{{ python.stdlib }}/",
  "file:{{ python.distlib }}/",
  "file:/usr/local/lib/python3.6/dist-packages/",
  "file:/etc/ssl/certs/ca-certificates.crt",
  "file:/etc/default/apport",
  "file:/etc/mime.types",
  "file:make_data.py",
  "file:leader.py",
  "file:follower.py",
  "file:tensorflow_io.py",
]

sgx.allowed_files = [
  "file:/usr/lib/ssl/openssl.cnf",
  "file:/usr/lib/gcc",
  "file:/usr/bin/ld",
  "file:/usr/bin/gcc",
  "file:/usr/bin/objdump",
  "file:/etc/ethers",
  "file:/etc/hosts",
  "file:/etc/group",
  "file:/etc/passwd",
  "file:/etc/ld.so.conf",
  "file:/etc/gai.conf",
  "file:/etc/host.conf",
  "file:/etc/resolv.conf",
  "file:/etc/nsswitch.conf",
  "file:/etc/sgx_default_qcnl.conf",
  "file:/etc/ssl/certs/ca-certificates.crt",
  "file:/proc/stat",
  "file:/tmp",
  "file:data/",
  "file:model/",
  "file:/root/.keras/keras.json",
  "file:dynamic_config.json",
]

#sgx.protected_files = [
#  "file:model",
#]
