diff --git a/tensorflow/core/distributed_runtime/rpc/BUILD b/tensorflow/core/distributed_runtime/rpc/BUILD
index ce1a20a5ae9..a972f51f930 100644
--- a/tensorflow/core/distributed_runtime/rpc/BUILD
+++ b/tensorflow/core/distributed_runtime/rpc/BUILD
@@ -41,9 +41,9 @@ filegroup(
 
 cc_library(
     name = "grpc_util",
-    srcs = ["grpc_util.cc"],
-    hdrs = ["grpc_util.h"],
-    linkopts = if_windows(["-DEFAULTLIB:ws2_32.lib"]),
+    srcs = ["grpc_util.cc", "grpc_sgx_ra_tls_utils.cc", "grpc_sgx_ra_tls_server.cc", "grpc_sgx_ra_tls_client.cc", "grpc_sgx_credentials_provider.cc"],
+    hdrs = ["grpc_util.h", "grpc_sgx_ra_tls.h", "grpc_sgx_ra_tls_utils.h", "grpc_sgx_credentials_provider.h"],
+    linkopts = ["-L/usr/local/lib", "-l:libmbedx509_gramine.a", "-l:libmbedcrypto_gramine.a"],
     deps = [
         "//tensorflow/core:lib",
         # Required to be able to overload TensorResponse parsing.
diff --git a/tensorflow/core/distributed_runtime/rpc/grpc_channel.cc b/tensorflow/core/distributed_runtime/rpc/grpc_channel.cc
index 985b0454837..f0b462d06e9 100644
--- a/tensorflow/core/distributed_runtime/rpc/grpc_channel.cc
+++ b/tensorflow/core/distributed_runtime/rpc/grpc_channel.cc
@@ -36,6 +36,7 @@ limitations under the License.
 #include "tensorflow/core/platform/types.h"
 #include "tensorflow/core/util/device_name_utils.h"
 
+
 namespace tensorflow {
 
 namespace {
@@ -143,8 +144,9 @@ Status NewHostPortGrpcChannel(const string& target,
   TF_RETURN_IF_ERROR(ValidateHostPortPair(target));
 
   ::grpc::ChannelArguments args = GetChannelArguments(rpc_options);
+  auto cred = GetChannelCredentials();
   *channel_pointer = ::grpc::CreateCustomChannel(
-      "dns:///" + target, ::grpc::InsecureChannelCredentials(), args);
+      "dns:///" + target, cred, args);
   return Status::OK();
 }
 
diff --git a/tensorflow/core/distributed_runtime/rpc/grpc_rpc_factory.cc b/tensorflow/core/distributed_runtime/rpc/grpc_rpc_factory.cc
index bcb98baaeb9..6a3d5b6031c 100644
--- a/tensorflow/core/distributed_runtime/rpc/grpc_rpc_factory.cc
+++ b/tensorflow/core/distributed_runtime/rpc/grpc_rpc_factory.cc
@@ -161,7 +161,7 @@ GrpcRPCFactory::ChannelPtr GrpcRPCFactory::CreateChannelForAddress(
   // (sometimes default) 20s.
   args.SetInt(GRPC_ARG_MAX_RECONNECT_BACKOFF_MS, 1000);
   return ::grpc::CreateCustomChannel(
-      /*target=*/address, ::grpc::InsecureChannelCredentials(), args);
+      /*target=*/address, GetChannelCredentials(), args);
 }
 
 void GrpcRPCFactory::CreateCall(const Tensor& request_t, const bool try_rpc,
diff --git a/tensorflow/core/distributed_runtime/rpc/grpc_server_lib.cc b/tensorflow/core/distributed_runtime/rpc/grpc_server_lib.cc
index fb925e51497..2dbe6b3ba32 100644
--- a/tensorflow/core/distributed_runtime/rpc/grpc_server_lib.cc
+++ b/tensorflow/core/distributed_runtime/rpc/grpc_server_lib.cc
@@ -506,7 +506,7 @@ const string GrpcServer::target() const {
 
 std::shared_ptr<::grpc::ServerCredentials> GrpcServer::GetServerCredentials(
     const ServerDef& server_def) const {
-  return ::grpc::InsecureServerCredentials();
+  return GetCredentials();
 }
 
 ChannelCreationFunction GrpcServer::GetChannelCreationFunction() const {
diff --git a/tensorflow/core/distributed_runtime/rpc/grpc_util.cc b/tensorflow/core/distributed_runtime/rpc/grpc_util.cc
index 98e05b64aad..d92b93d5df9 100644
--- a/tensorflow/core/distributed_runtime/rpc/grpc_util.cc
+++ b/tensorflow/core/distributed_runtime/rpc/grpc_util.cc
@@ -16,6 +16,7 @@ limitations under the License.
 #include "tensorflow/core/distributed_runtime/rpc/grpc_util.h"
 #include "tensorflow/core/distributed_runtime/tensor_coding.h"
 #include "tensorflow/core/lib/random/random.h"
+#include "tensorflow/core/distributed_runtime/rpc/grpc_sgx_ra_tls.h"
 
 namespace tensorflow {
 
@@ -128,4 +129,29 @@ bool GrpcMaybeParseProto(grpc::ByteBuffer* src, tstring* dst) {
   return true;
 }
 
+std::shared_ptr<::grpc::ServerCredentials> GetCredentials() {
+    const char* secure = std::getenv("TF_GRPC_SGX_RA_TLS_ENABLE");
+    LOG(INFO) << "GetCredentials";
+    if (secure && strcmp(secure, "on") == 0) {
+        LOG(INFO) << "Secure mode: " << string(secure);
+        return ::grpc::sgx::TlsServerCredentials();
+    }
+    return ::grpc::InsecureServerCredentials();
+
+}
+
+std::shared_ptr<::grpc::ChannelCredentials> GetChannelCredentials() {
+    const char* secure = std::getenv("TF_GRPC_SGX_RA_TLS_ENABLE");
+    LOG(INFO) << "GetCredentials";
+    if (secure && strcmp(secure, "on") == 0) {
+       LOG(INFO) << "Secure mode: " << string(secure);
+       const char* mr_enclave = std::getenv("MR_ENCLAVE");
+       const char* mr_signer = std::getenv("MR_SIGNER");
+       const char* isv_prod_id = std::getenv("ISV_PROD_ID");
+       const char* isv_svn = std::getenv("ISV_SVN");
+       LOG(INFO) << "\tSecure Params: " << string(mr_enclave) << "\n\t\t" << string(mr_signer);
+       return ::grpc::sgx::TlsCredentials(mr_enclave, mr_signer, isv_prod_id, isv_svn);
+    }
+    return ::grpc::InsecureChannelCredentials();
+}
 }  // namespace tensorflow
diff --git a/tensorflow/core/distributed_runtime/rpc/grpc_util.h b/tensorflow/core/distributed_runtime/rpc/grpc_util.h
index aed798217cb..aa70e94971a 100644
--- a/tensorflow/core/distributed_runtime/rpc/grpc_util.h
+++ b/tensorflow/core/distributed_runtime/rpc/grpc_util.h
@@ -133,7 +133,9 @@ bool GrpcMaybeParseProto(::grpc::ByteBuffer* src, string* dst);
 
 // Copy grpc buffer src to tstring *dst.
 bool GrpcMaybeParseProto(::grpc::ByteBuffer* src, tstring* dst);
+std::shared_ptr<::grpc::ServerCredentials> GetCredentials();
 
+std::shared_ptr<::grpc::ChannelCredentials> GetChannelCredentials();
 }  // namespace tensorflow
 
 #endif  // TENSORFLOW_CORE_DISTRIBUTED_RUNTIME_RPC_GRPC_UTIL_H_
diff --git a/third_party/grpc/generate_cc_env_fix.patch b/third_party/grpc/generate_cc_env_fix.patch
index 51832fe9628..199d0cda566 100644
--- a/third_party/grpc/generate_cc_env_fix.patch
+++ b/third_party/grpc/generate_cc_env_fix.patch
@@ -1,10 +1,81 @@
+diff --git a/bazel/generate_cc.bzl b/bazel/generate_cc.bzl
+index 484959ebb7..81d52fd28f 100644
 --- a/bazel/generate_cc.bzl
 +++ b/bazel/generate_cc.bzl
-@@ -141,6 +141,7 @@ def generate_cc_impl(ctx):
+@@ -140,6 +140,7 @@ def generate_cc_impl(ctx):
          outputs = out_files,
          executable = ctx.executable._protoc,
          arguments = arguments,
 +        use_default_shell_env = True,
      )
-
+
      return struct(files = depset(out_files))
+diff --git a/src/core/lib/security/credentials/tls/tls_credentials.cc b/src/core/lib/security/credentials/tls/tls_credentials.cc
+index 701fd3b150..0826d05933 100644
+--- a/src/core/lib/security/credentials/tls/tls_credentials.cc
++++ b/src/core/lib/security/credentials/tls/tls_credentials.cc
+@@ -111,9 +111,9 @@ TlsServerCredentials::create_security_connector() {
+
+ grpc_channel_credentials* grpc_tls_credentials_create(
+     grpc_tls_credentials_options* options) {
+-  if (!CredentialOptionSanityCheck(options, true /* is_client */)) {
+-    return nullptr;
+-  }
++  //if (!CredentialOptionSanityCheck(options, true /* is_client */)) {
++  //  return nullptr;
++  //}
+   return new TlsCredentials(
+       grpc_core::RefCountedPtr<grpc_tls_credentials_options>(options));
+ }
+diff --git a/src/core/lib/security/security_connector/alts/alts_security_connector.cc b/src/core/lib/security/security_connector/alts/alts_security_connector.cc
+index 1274edb6e6..cdfe9834dd 100644
+--- a/src/core/lib/security/security_connector/alts/alts_security_connector.cc
++++ b/src/core/lib/security/security_connector/alts/alts_security_connector.cc
+@@ -108,6 +108,8 @@ class grpc_alts_channel_security_connector final
+                        grpc_auth_context* /*auth_context*/,
+                        grpc_closure* /*on_call_host_checked*/,
+                        grpc_error** error) override {
++	*error = GRPC_ERROR_NONE;
++	return true;
+     if (host.empty() || host != target_name_) {
+       *error = GRPC_ERROR_CREATE_FROM_STATIC_STRING(
+           "ALTS call host does not match target name");
+diff --git a/src/core/lib/security/security_connector/local/local_security_connector.cc b/src/core/lib/security/security_connector/local/local_security_connector.cc
+index 6fb770d7ad..61f454509e 100644
+--- a/src/core/lib/security/security_connector/local/local_security_connector.cc
++++ b/src/core/lib/security/security_connector/local/local_security_connector.cc
+@@ -186,6 +186,8 @@ class grpc_local_channel_security_connector final
+                        grpc_auth_context* /*auth_context*/,
+                        grpc_closure* /*on_call_host_checked*/,
+                        grpc_error** error) override {
++	*error = GRPC_ERROR_NONE;
++	return true;
+     if (host.empty() || host != target_name_) {
+       *error = GRPC_ERROR_CREATE_FROM_STATIC_STRING(
+           "local call host does not match target name");
+diff --git a/src/core/lib/security/security_connector/ssl/ssl_security_connector.cc b/src/core/lib/security/security_connector/ssl/ssl_security_connector.cc
+index 13b0dd59a0..a60637b7c2 100644
+--- a/src/core/lib/security/security_connector/ssl/ssl_security_connector.cc
++++ b/src/core/lib/security/security_connector/ssl/ssl_security_connector.cc
+@@ -190,6 +190,8 @@ class grpc_ssl_channel_security_connector final
+                        grpc_auth_context* auth_context,
+                        grpc_closure* /*on_call_host_checked*/,
+                        grpc_error** error) override {
++	*error = GRPC_ERROR_NONE;
++	return true;
+     grpc_security_status status = GRPC_SECURITY_ERROR;
+     tsi_peer peer = grpc_shallow_peer_from_ssl_auth_context(auth_context);
+     if (grpc_ssl_host_matches_name(&peer, host)) status = GRPC_SECURITY_OK;
+diff --git a/src/core/lib/security/security_connector/ssl_utils.cc b/src/core/lib/security/security_connector/ssl_utils.cc
+index 2c2d706673..6c62e73040 100644
+--- a/src/core/lib/security/security_connector/ssl_utils.cc
++++ b/src/core/lib/security/security_connector/ssl_utils.cc
+@@ -169,6 +169,8 @@ bool grpc_ssl_check_call_host(grpc_core::StringView host,
+                               grpc_auth_context* auth_context,
+                               grpc_closure* /*on_call_host_checked*/,
+                               grpc_error** error) {
++  *error = GRPC_ERROR_NONE;
++  return true;
+   grpc_security_status status = GRPC_SECURITY_ERROR;
+   tsi_peer peer = grpc_shallow_peer_from_ssl_auth_context(auth_context);
+   if (grpc_ssl_host_matches_name(&peer, host)) status = GRPC_SECURITY_OK;
