/* Copyright 2020 The FedLearner Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
import "fedlearner/common/common.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

package fedlearner.common;

message DataSourceRequest {
  DataSourceMeta data_source_meta = 1;
}

message DataSourceStatus {
  FLRole role = 1;
  DataSourceState state = 2;
}

enum SyncExampleIdState {
  UnSynced = 0;
  Syncing = 1;
  Synced = 2;
}

enum JoinExampleState {
  UnJoined = 0;
  Joining = 1;
  Joined = 2;
}

message SyncExampleIdRep {
  int64 rank_id = 1;
  SyncExampleIdState state = 2;
}

message JoinExampleRep {
  int64 rank_id = 1;
  JoinExampleState state = 2;
}

message RawDataManifest {
  int64 partition_id = 1;
  SyncExampleIdRep sync_example_id_rep = 2;
  JoinExampleRep join_example_rep = 3;
  bool finished = 4;
  int64 next_process_index = 5;
  int64 peer_dumped_index = 6;
  int64 next_raw_data_sub_index = 7;
}

message RawDataMeta {
  string file_path = 1;
  int64 start_index = 2;
  google.protobuf.Timestamp timestamp = 3;
}

message AddedRawDataMetas {
  repeated RawDataMeta raw_data_metas = 1;
  bool dedup = 2;
}

message PeerDumpedIndex {
  int64 peer_dumped_index = 1;
}

message RawDataRequest {
  DataSourceMeta data_source_meta = 1;
  int64 rank_id = 2;
  int64 partition_id = 3;
  oneof msg {
    google.protobuf.Empty sync_example_id = 4;
    google.protobuf.Empty join_example = 5;
    google.protobuf.Empty finish_raw_data = 6;
    AddedRawDataMetas added_raw_data_metas = 7;
    PeerDumpedIndex peer_dumped_index = 8;
  }
}

message RawDataResponse {
  Status status = 1;
  oneof msg {
    RawDataManifest manifest = 2;
    google.protobuf.Empty finished = 3;
    google.protobuf.Timestamp timestamp = 4;
  }
}

service DataJoinMasterService {
  rpc GetDataSource(google.protobuf.Empty) returns (DataSource) {}
  rpc GetDataSourceStatus(DataSourceRequest) returns (DataSourceStatus) {}
  rpc AbortDataSource(DataSourceRequest) returns (Status) {}
  rpc RequestJoinPartition(RawDataRequest) returns (RawDataResponse) {}
  rpc FinishJoinPartition(RawDataRequest) returns (Status) {}
  rpc QueryRawDataManifest(RawDataRequest) returns (RawDataManifest) {}
  rpc FinishRawData(RawDataRequest) returns (Status) {}
  rpc AddRawData(RawDataRequest) returns (Status) {}
  rpc ForwardPeerDumpedIndex(RawDataRequest) returns (Status) {}
  rpc GetRawDataLatestTimeStamp(RawDataRequest) returns (RawDataResponse) {}
}

enum DataBlockType {
  TfRecord = 0;
  CsvDict = 1;
}

message DataBlockMeta {
  string block_id = 1;
  int64 partition_id = 2;
  uint32 file_version = 3;
  int64 start_time = 4;
  int64 end_time = 5;
  repeated bytes example_ids = 6;
  int64 leader_start_index = 7;
  int64 leader_end_index = 8;
  int64 follower_restart_index = 9;
  int64 data_block_index = 10;
  DataBlockType data_block_type = 11;
}

message StartPartitionRequest {
  DataSourceMeta data_source_meta = 1;
  int64 rank_id = 2;
  int64 partition_id = 3;
}

message StartPartitionResponse {
  Status status = 1;
  int64 next_index = 2;
  bool finished = 3;
  int64 dumped_index = 4;
}

message LiteExampleIds {
  int64 partition_id = 1;
  int64 begin_index = 2;
  repeated bytes example_id = 3;
  repeated int64 event_time = 4;
}

message SyncContent {
  oneof msg {
    DataBlockMeta data_block_meta = 1;
    LiteExampleIds lite_example_ids = 2;
  }
}

message SyncPartitionRequest {
  DataSourceMeta data_source_meta = 1;
  int64 rank_id = 2;
  int64 partition_id = 3;
  // serialization of SyncContent
  bytes content_bytes = 4;
  // if compressed is set true, we use the gzip compress sync content
  bool compressed = 5;
}

message SyncPartitionResponse {
  Status status = 1;
  int64 next_index = 2;
  int64 dumped_index = 3;
}

message FinishPartitionRequest {
  DataSourceMeta data_source_meta = 1;
  int64 rank_id = 2;
  int64 partition_id = 3;
}

message FinishPartitionResponse {
  Status status = 1;
  bool finished = 2;
  int64 dumped_index = 3;
}

service DataJoinWorkerService {
  rpc StartPartition(StartPartitionRequest)
      returns (StartPartitionResponse) {}
  rpc SyncPartition(SyncPartitionRequest)
      returns (SyncPartitionResponse) {}
  rpc FinishPartition(FinishPartitionRequest)
      returns (FinishPartitionResponse) {}
}

message LastDumpedExampleIdMeta {
  string file_path = 1;
  int64 start_index = 2;
  int64 end_index = 3;
  int64 process_index = 4;
}

message DumpedExampleIdAnchor {
  oneof msg {
    LastDumpedExampleIdMeta last_meta = 1;
    google.protobuf.Empty undumped = 2;
  }
}

message RawDataOptions {
  string raw_data_iter = 1;
  // only support three compressed, ''(UnCompressed), ZLIB, GZIP
  string compressed_type = 2;
}

message DataBlockBuilderOptions {
  string data_block_builder = 1;
}

message ExampleJoinerOptions {
  string example_joiner = 1;
  int64 min_matching_window = 2;
  int64 max_matching_window = 3;
  int64 data_block_dump_interval = 4;
  int64 data_block_dump_threshold = 5;
}

message ExampleIdDumpOptions {
  int64 example_id_dump_interval = 1;
  int64 example_id_dump_threshold = 2;
}

message BatchProcessorOptions {
  int64 batch_size = 1;
  int64 max_flying_item = 2;
}

message DataJoinWorkerOptions {
  bool use_mock_etcd = 1;
  RawDataOptions raw_data_options = 2;
  ExampleJoinerOptions example_joiner_options = 3;
  ExampleIdDumpOptions example_id_dump_options = 4;
  BatchProcessorOptions batch_processor_options = 5;
  DataBlockBuilderOptions data_block_builder_options = 6;
}

message DataJoinMasterOptions {
  bool use_mock_etcd = 1;
}

message ExampleValidatorOptions {
  string example_validator = 1;
  bool validate_event_time = 2;
}

message DataJoinPotralOptions {
  ExampleValidatorOptions example_validator = 1;
  int64 reducer_buffer_size = 2;
  RawDataOptions raw_data_options = 3;
  repeated string downstream_data_source_masters = 4;
  bool use_mock_etcd = 5;
}

service DataJoinPotralService {
  rpc Ping(google.protobuf.Empty) returns (Status) {}
}

message SignIdsRequest {
  repeated string ids = 1;
}

message SignIdsResponse {
  Status status = 1;
  repeated string signed_ids = 2;
}

service RsaPsiSignService {
  rpc SignIds(SignIdsRequest) returns (SignIdsResponse) {}
}

message RsaPsiPreProcessorOptions {
  FLRole role = 1;
  string rsa_key_file_path = 2;
  repeated string input_file_paths = 3;
  string output_file_dir = 4;
  string raw_data_publish_dir = 5;
  int64 partition_id = 6;
  string leader_rsa_psi_signer_addr = 7;
  int64 offload_processor_number = 8;
  BatchProcessorOptions batch_processor_options = 9;
}
