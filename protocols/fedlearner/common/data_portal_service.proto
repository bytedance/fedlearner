/* Copyright 2020 The FedLearner Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
import "fedlearner/common/common.proto";
import "fedlearner/common/data_join_service.proto";
import "google/protobuf/empty.proto";

package fedlearner.common;

enum DataPortalType {
  PSI = 0;         
  Streaming = 1;
}

enum PartState {
  kInit = 0;
  kIdMap = 1;
  kIdMapped = 2;
  kEventTimeReduce = 3; 
  kEventTimeReduced = 4;
}

message DataPortalJob {
  int64 job_id = 1;
  repeated string fpaths = 2;
  bool finished = 3;
}

message DataPortalManifest {
  string name = 1;
  DataPortalType data_portal_type = 2;
  uint32 output_partition_num = 3;
  string input_file_wildcard = 4;
  string input_base_dir = 5;
  string output_base_dir = 6;
  string raw_data_publish_dir = 7;
  int64 processing_job_id = 8;
  int64 next_job_id = 9;
}

message PortalJobPart {
  int64 job_id = 1;
  int64 rank_id = 2;
  int64 partition_id = 3;
  PartState part_state = 4;
}

message NewTaskRequest {
  int64 rank_id = 1;
}

message MapTask {
  string task_name = 1;
  repeated string fpaths = 2;
  string output_base_dir = 3;
  int64 output_partition_num = 4;
  int64 partition_id = 5;
  string part_field = 6;
  DataPortalType data_portal_type = 7;
}

message ReduceTask {
  string task_name = 1;
  string map_base_dir = 2;
  string reduce_base_dir = 3;
  int64 partition_id = 4;
}

message NewTaskResponse {
  Status status = 1;
  oneof msg {
    MapTask map_task = 2;
    ReduceTask reduce_task = 3;
    google.protobuf.Empty pending = 4;
    google.protobuf.Empty finished = 5;
  }
}

message FinishTaskRequest {
  int64 rank_id = 1;
  int64 partition_id = 2;
  PartState part_state = 3;
}

service DataPortalMasterService {
  rpc GetDataPortalManifest(google.protobuf.Empty) returns (DataPortalManifest) {}
  
  rpc RequestNewTask(NewTaskRequest) returns (NewTaskResponse) {}
    
  rpc FinishTask(FinishTaskRequest) returns (Status) {}
}

message DataPotraMasterlOptions {
  bool use_mock_etcd = 1;
  bool long_running = 2;
  bool check_success_tag = 3;
}

message DataPortalWorkerOptions {
  RawDataOptions raw_data_options = 1;
  WriterOptions writer_options = 2;
  BatchProcessorOptions batch_processor_options = 3;
  int64 merger_read_ahead_size = 4;
  int64 merger_read_batch_size = 5;
  bool use_mock_etcd = 6;
}
