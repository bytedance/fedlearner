/* Copyright 2020 The FedLearner Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package fedlearner.common;
import "fedlearner/common/common.proto";
import "tensorflow/core/protobuf/cluster.proto";

enum MasterStatus {
    CREATED = 0;
    INITIALING = 1;
    RUNNING = 2;
    WORKER_COMPLETED = 3;
    COMPLETED = 4;
}

enum DataSourceType {
  JOINED = 0;
  LOCAL = 1;
}

enum WorkerType {
  REMOTE_WORKER = 0;
  LOCAL_WORKER = 1;
}

message DataBlockRequest {
  uint32 worker_rank = 1;
  string block_id = 2;
  WorkerType worker_type = 3;
};

message DataBlockResponse {
  Status status = 1;
  string block_id = 2;
  string data_path = 3;
}

message WorkerRegisterRequest {
  uint32 worker_rank = 1;
  string hostname = 2;
  // for compatibility, worker-0 will send cluster_def to master, because master
  // cannot get ClusterSpec environment on webconsole_v1.5
  // set cluster_def field number 999 for more easy to remove when resolved
  tensorflow.ClusterDef cluster_def = 999;
}

message WorkerRegisterResponse {
  Status status = 1;
}

message WorkerCompleteRequest {
  uint32 worker_rank = 1;
  uint64 timestamp = 2;
}

message WorkerCompleteResponse {
  Status status = 1;
}

message IsCompletedRequest {}

message IsCompletedResponse {
  bool completed = 1;
}

service TrainerMasterService {
  rpc RequestDataBlock (DataBlockRequest) returns (DataBlockResponse) {}
  rpc WorkerRegister (WorkerRegisterRequest) returns (WorkerRegisterResponse) {}
  rpc WorkerComplete (WorkerCompleteRequest) returns (WorkerCompleteResponse) {}
  rpc IsCompleted (IsCompletedRequest) returns (IsCompletedResponse) {}
}
