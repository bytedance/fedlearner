/* Copyright 2020 The FedLearner Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/bytedance/fedlearner/deploy/kubernetes_operator/pkg/apis/fedlearner.k8s.io/v1alpha2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TrainingSetLister helps list TrainingSets.
type TrainingSetLister interface {
	// List lists all TrainingSets in the indexer.
	List(selector labels.Selector) (ret []*v1alpha2.TrainingSet, err error)
	// TrainingSets returns an object that can list and get TrainingSets.
	TrainingSets(namespace string) TrainingSetNamespaceLister
	TrainingSetListerExpansion
}

// trainingSetLister implements the TrainingSetLister interface.
type trainingSetLister struct {
	indexer cache.Indexer
}

// NewTrainingSetLister returns a new TrainingSetLister.
func NewTrainingSetLister(indexer cache.Indexer) TrainingSetLister {
	return &trainingSetLister{indexer: indexer}
}

// List lists all TrainingSets in the indexer.
func (s *trainingSetLister) List(selector labels.Selector) (ret []*v1alpha2.TrainingSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.TrainingSet))
	})
	return ret, err
}

// TrainingSets returns an object that can list and get TrainingSets.
func (s *trainingSetLister) TrainingSets(namespace string) TrainingSetNamespaceLister {
	return trainingSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TrainingSetNamespaceLister helps list and get TrainingSets.
type TrainingSetNamespaceLister interface {
	// List lists all TrainingSets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha2.TrainingSet, err error)
	// Get retrieves the TrainingSet from the indexer for a given namespace and name.
	Get(name string) (*v1alpha2.TrainingSet, error)
	TrainingSetNamespaceListerExpansion
}

// trainingSetNamespaceLister implements the TrainingSetNamespaceLister
// interface.
type trainingSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TrainingSets in the indexer for a given namespace.
func (s trainingSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.TrainingSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.TrainingSet))
	})
	return ret, err
}

// Get retrieves the TrainingSet from the indexer for a given namespace and name.
func (s trainingSetNamespaceLister) Get(name string) (*v1alpha2.TrainingSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("trainingset"), name)
	}
	return obj.(*v1alpha2.TrainingSet), nil
}
